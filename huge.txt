'\u000A\u000A\u000A\u000A  [\u000A  \u000A    \u000A      new FECRU.SBS.Hunk(FECRU.SBS.Range.pointBeforeLine(14),\u000A               FECRU.SBS.Range.ofLength(14, 1),\u000A               [],\u000A               [\u0022  this.focusOffset \u003D 5\u003B\u0022])\u000A    \u000A    \u000A    \u000A    \u000A    ,\u000A  \u000A    \u000A    \u000A      FECRU.SBS.Hunk.ofLengths(15,\u000A                     1,\u000A                     16,\u000A                     1,\u000A                     [\u0022  this.pane_ \u003D LinedPane.window(this.numLines_, 940, lineHeight)\u003B\u0022],\u000A                     [\u0022  this.pane_ \u003D LinedPane.window(this.numLines_, 928, lineHeight)\u003B\u0022])\u000A    \u000A    \u000A    \u000A    ,\u000A  \u000A    \u000A    \u000A      FECRU.SBS.Hunk.ofLengths(37,\u000A                     1,\u000A                     38,\u000A                     6,\u000A                     [\u0022  this.unifiedLines_.setPaneWidth(940 \u002D 30)\u003B\u0022],\u000A                     [\u0022  var numbersWidth \u003D 35\u003B\u0022, \u0022  this.unifiedLines_.setPaneWidth(928 \u002D numbersWidth \u002D 1)\u003B\u0022, \u0022  if (this.unifiedLines_.scrollx()) {\u0022, \u0022    this.$elem_.css(\u0026#39\u003Bmargin\u002Dbottom\u0026#39\u003B, $.getScrollbarWidth())\u003B\u0022, \u0022  }\u0022, \u0022\u0022])\u000A    \u000A    \u000A    \u000A    ,\u000A  \u000A    \u000A    \u000A    \u000A      new FECRU.SBS.Hunk(FECRU.SBS.Range.ofLength(39, 1),\u000A               FECRU.SBS.Range.pointBeforeLine(45),\u000A               [\u0022\u0022],\u000A               [])\u000A    \u000A    \u000A    ,\u000A  \u000A    \u000A    \u000A      FECRU.SBS.Hunk.ofLengths(47,\u000A                     1,\u000A                     52,\u000A                     1,\u000A                     [\u0022    .delegate(\u0026#39\u003B.skipped\u0026#39\u003B, \u0026#39\u003Bclick.skipped\u0026#39\u003B, $.proxy(this.expand, this))\u003B\u0022],\u000A                     [\u0022    .delegate(\u0026#39\u003B.skipped\u0026#39\u003B, \u0026#39\u003Bclick.skipped\u0026#39\u003B, $.proxy(this.expandSkipped_, this))\u003B\u0022])\u000A    \u000A    \u000A    \u000A    ,\u000A  \u000A    \u000A    \u000A      FECRU.SBS.Hunk.ofLengths(67,\u000A                     1,\u000A                     72,\u000A                     1,\u000A                     [\u0022UnifiedDiff.prototype.expand \u003D function (e) {\u0022],\u000A                     [\u0022UnifiedDiff.prototype.expandSkipped_ \u003D function (e) {\u0022])\u000A    \u000A    \u000A    \u000A    ,\u000A  \u000A    \u000A      new FECRU.SBS.Hunk(FECRU.SBS.Range.pointBeforeLine(75),\u000A               FECRU.SBS.Range.ofLength(80, 40),\u000A               [],\u000A               [\u0022UnifiedDiff.prototype.contextFile_ \u003D function () {\u0022, \u0022  return this.udiff_.to\u003B\u0022, \u0022}\u003B\u0022, \u0022\u0022, \u0022UnifiedDiff.prototype.unifiedFile_ \u003D function () {\u0022, \u0022  return this.contextFile_().file_.file_\u003B\u0022, \u0022}\u003B\u0022, \u0022\u0022, \u0022/**\u0022, \u0022 * Scroll to the from line number if it is visible and return true, else\u0022, \u0022 * returns false.\u0022, \u0022 */\u0022, \u0022UnifiedDiff.prototype.scrollToFromLine \u003D function (lineNum) {\u0022, \u0022  var unifiedLineNum \u003D this.unifiedFile_().from2unified_[lineNum]\u003B\u0022, \u0022  return this.scrollToUnifiedLine(unifiedLineNum)\u003B\u0022, \u0022}\u003B\u0022, \u0022\u0022, \u0022/**\u0022, \u0022 * Scroll to the to line number if it is visible and return true, else\u0022, \u0022 * returns false.\u0022, \u0022 */\u0022, \u0022UnifiedDiff.prototype.scrollToToLine \u003D function (lineNum) {\u0022, \u0022  var unifiedLineNum \u003D this.unifiedFile_().to2unified_[lineNum]\u003B\u0022, \u0022  return this.scrollToUnifiedLine(unifiedLineNum)\u003B\u0022, \u0022}\u003B\u0022, \u0022\u0022, \u0022UnifiedDiff.prototype.scrollToUnifiedLine \u003D function (lineNum) {\u0022, \u0022  var contextFile \u003D this.contextFile_()\u003B\u0022, \u0022  var paneLineNum \u003D contextFile.file2viewport[lineNum]\u003B\u0022, \u0022  var fileLineNum \u003D contextFile.viewport2file[paneLineNum]\u003B\u0022, \u0022  if (typeof fileLineNum \u003D\u003D\u003D \u0026#39\u003Bnumber\u0026#39\u003B) {\u0022, \u0022    paneLineNum \u003D Math.max(1, paneLineNum \u002D this.focusOffset)\u003B\u0022, \u0022    this.pane_.scrollToLine(paneLineNum, 0, 0)\u003B\u0022, \u0022    return true\u003B\u0022, \u0022  } else {\u0022, \u0022    // lineNum is hidden in a skipped section.\u0022, \u0022    return false\u003B\u0022, \u0022  }\u0022, \u0022}\u003B\u0022, \u0022\u0022])\u000A    \u000A    \u000A    \u000A    \u000A    ,\u000A  \u000A    \u000A      new FECRU.SBS.Hunk(FECRU.SBS.Range.pointBeforeLine(80),\u000A               FECRU.SBS.Range.ofLength(125, 2),\u000A               [],\u000A               [\u0022  this.width_ \u003D null\u003B\u0022, \u0022  this.height_ \u003D null\u003B\u0022])\u000A    \u000A    \u000A    \u000A    \u000A    ,\u000A  \u000A    \u000A    \u000A      FECRU.SBS.Hunk.ofLengths(81,\u000A                     1,\u000A                     128,\u000A                     1,\u000A                     [\u0022  this.fromHunkMap_ \u003D new HunkMap(this.sbsdiff_.hunks, \u0026#39\u003Bfrom\u0026#39\u003B, this.sbsdiff_.from.numLines, true, true)\u003B\u0022],\u000A                     [\u0022  this.fromHunkMap_ \u003D new HunkMap(this.sbsdiff_.hunks, \u0026#39\u003Bfrom\u0026#39\u003B, this.sbsdiff_.from.numLines, lineHeight)\u003B\u0022])\u000A    \u000A    \u000A    \u000A    ,\u000A  \u000A    \u000A    \u000A      FECRU.SBS.Hunk.ofLengths(83,\u000A                     1,\u000A                     130,\u000A                     1,\u000A                     [\u0022  this.segments_ \u003D new SegmentPane(lineHeight)\u003B\u0022],\u000A                     [\u0022  this.segments_ \u003D new SegmentPane(sbsdiff, lineHeight)\u003B\u0022])\u000A    \u000A    \u000A    \u000A    ,\u000A  \u000A    \u000A    \u000A      FECRU.SBS.Hunk.ofLengths(85,\u000A                     1,\u000A                     132,\u000A                     1,\u000A                     [\u0022  this.toHunkMap_ \u003D new HunkMap(this.sbsdiff_.hunks, \u0026#39\u003Bto\u0026#39\u003B, this.sbsdiff_.to.numLines, true, true)\u003B\u0022],\u000A                     [\u0022  this.toHunkMap_ \u003D new HunkMap(this.sbsdiff_.hunks, \u0026#39\u003Bto\u0026#39\u003B, this.sbsdiff_.to.numLines, lineHeight)\u003B\u0022])\u000A    \u000A    \u000A    \u000A    ,\u000A  \u000A    \u000A    \u000A      FECRU.SBS.Hunk.ofLengths(91,\u000A                     2,\u000A                     138,\u000A                     4,\u000A                     [\u0022  this.$elem_ \u003D $(\u0026#39\u003B\u0026lt\u003Bdiv class\u003D\u0026quot\u003Bdiffract diffract\u002Dsbsdiff\u0026quot\u003B\u0026gt\u003B\u0026#39\u003B)\u0022, \u0022    .height($(window).height() * 0.95)\u003B\u0022],\u000A                     [\u0022  this.$elem_ \u003D $(\u0026#39\u003B\u0026lt\u003Bdiv class\u003D\u0026quot\u003Bdiffract diffract\u002Dsbsdiff\u0026quot\u003B\u0026gt\u003B\u0026#39\u003B)\u003B\u0022, \u0022  if (this.height_ !\u003D\u003D null) {\u0022, \u0022    this.setHeight(this.height_)\u003B\u0022, \u0022  }\u0022])\u000A    \u000A    \u000A    \u000A    ,\u000A  \u000A    \u000A    \u000A      FECRU.SBS.Hunk.ofLengths(105,\u000A                     4,\u000A                     154,\u000A                     1,\u000A                     [\u0022  var width \u003D (this.$elem_.width() \u002D 30) / 2\u003B\u0022, \u0022  this.fromFile_.setPaneWidth(width)\u003B\u0022, \u0022  this.segments_.setPaneWidth(30)\u003B\u0022, \u0022  this.toFile_.setPaneWidth(width)\u003B\u0022],\u000A                     [\u0022  this.setWidth(this.width_)\u003B\u0022])\u000A    \u000A    \u000A    \u000A    ,\u000A  \u000A    \u000A      new FECRU.SBS.Hunk(FECRU.SBS.Range.pointBeforeLine(110),\u000A               FECRU.SBS.Range.ofLength(156, 30),\u000A               [],\u000A               [\u0022  this.enterDocument()\u003B\u0022, \u0022}\u003B\u0022, \u0022\u0022, \u0022SideBySideDiff.prototype.setWidth \u003D function (width) {\u0022, \u0022  this.width_ \u003D width\u003B\u0022, \u0022  if (this.$elem_) {\u0022, \u0022    var segmentWidth \u003D 30\u003B\u0022, \u0022    var hunkMapsWidth \u003D 18\u003B\u0022, \u0022    var availableWidth \u003D (width \u002D segmentWidth \u002D hunkMapsWidth)\u003B\u0022, \u0022\u0022, \u0022    this.fromFile_.setPaneWidth(Math.floor(availableWidth / 2) \u002D 1)\u003B\u0022, \u0022    this.segments_.setPaneWidth(segmentWidth)\u003B\u0022, \u0022    this.toFile_.setPaneWidth(Math.ceil(availableWidth / 2) \u002D 1)\u003B\u0022, \u0022    if (this.$elem_.parent().length \u003D\u003D\u003D 1) {\u0022, \u0022      this.scrollbars()\u003B\u0022, \u0022    }\u0022, \u0022  }\u0022, \u0022}\u003B\u0022, \u0022\u0022, \u0022SideBySideDiff.prototype.setHeight \u003D function (height) {\u0022, \u0022  this.height_ \u003D height\u003B\u0022, \u0022  if (this.$elem_) {\u0022, \u0022    this.$elem_.height(height)\u003B\u0022, \u0022    if (this.$elem_.parent().length \u003D\u003D\u003D 1) {\u0022, \u0022      this.scrollbars()\u003B\u0022, \u0022    }\u0022, \u0022  }\u0022, \u0022}\u003B\u0022, \u0022\u0022, \u0022SideBySideDiff.prototype.scrollbars \u003D function () {\u0022])\u000A    \u000A    \u000A    \u000A    \u000A    ,\u000A  \u000A    \u000A    \u000A      FECRU.SBS.Hunk.ofLengths(113,\u000A                     1,\u000A                     189,\u000A                     5,\u000A                     [\u0022  this.enterDocument()\u003B\u0022],\u000A                     [\u0022  // Don\u0026#39\u003Bt show checkboard backgrounds unless we have scrollbars.\u0022, \u0022  this.fromFile_.$elem_\u0022, \u0022    .toggleClass(\u0026#39\u003Ball\u002Dlines\u002Dvisible\u0026#39\u003B, !this.fromFile_.scrolly())\u003B\u0022, \u0022  this.toFile_.$elem_\u0022, \u0022    .toggleClass(\u0026#39\u003Ball\u002Dlines\u002Dvisible\u0026#39\u003B, !this.toFile_.scrolly())\u003B\u0022])\u000A    \u000A    \u000A    \u000A    ,\u000A  \u000A    \u000A      new FECRU.SBS.Hunk(FECRU.SBS.Range.pointBeforeLine(175),\u000A               FECRU.SBS.Range.ofLength(255, 9),\u000A               [],\u000A               [\u0022SideBySideDiff.prototype.scrollToFirstHunk \u003D function () {\u0022, \u0022  var hunk \u003D this.sbsdiff_.hunks[0]\u003B\u0022, \u0022  if (hunk.isAddition()) {\u0022, \u0022    this.toFile_.scrollToLineAndFire(hunk.toRange.low \u002D this.focusOffset, 0, 0)\u003B\u0022, \u0022  } else {\u0022, \u0022    this.fromFile_.scrollToLineAndFire(hunk.fromRange.low \u002D this.focusOffset, 0, 0)\u003B\u0022, \u0022  }\u0022, \u0022}\u003B\u0022, \u0022\u0022])\u000A    \u000A    \u000A    \u000A    \u000A    ,\u000A  \u000A    \u000A    \u000A      FECRU.SBS.Hunk.ofLengths(207,\u000A                     1,\u000A                     296,\u000A                     2,\u000A                     [\u0022  this.numbers_ \u003D LinedPane.scrollable(file.numLines, 30, lineHeight)\u003B\u0022],\u000A                     [\u0022  var numbersWidth \u003D 35\u003B\u0022, \u0022  this.numbers_ \u003D LinedPane.scrollable(file.numLines, numbersWidth, lineHeight)\u003B\u0022])\u000A    \u000A    \u000A    \u000A    ,\u000A  \u000A    \u000A    \u000A      FECRU.SBS.Hunk.ofLengths(239,\u000A                     2,\u000A                     329,\u000A                     3,\u000A                     [\u0022  this.numbers_.setPaneWidth(30)\u003B\u0022, \u0022  this.lines_.setPaneWidth(paneWidth \u002D 30)\u003B\u0022],\u000A                     [\u0022  var numbersWidth \u003D 35\u003B\u0022, \u0022  this.numbers_.setPaneWidth(numbersWidth)\u003B\u0022, \u0022  this.lines_.setPaneWidth(paneWidth \u002D numbersWidth)\u003B\u0022])\u000A    \u000A    \u000A    \u000A    ,\u000A  \u000A    \u000A    \u000A      FECRU.SBS.Hunk.ofLengths(284,\u000A                     1,\u000A                     375,\u000A                     2,\u000A                     [\u0022var SegmentPane \u003D window.SegmentPane \u003D function (lineHeight) {\u0022],\u000A                     [\u0022var SegmentPane \u003D window.SegmentPane \u003D function (sbsdiff, lineHeight) {\u0022, \u0022  this.sbsdiff \u003D sbsdiff\u003B\u0022])\u000A    \u000A    \u000A    \u000A    ,\u000A  \u000A    \u000A    \u000A      FECRU.SBS.Hunk.ofLengths(319,\u000A                     3,\u000A                     411,\u000A                     3,\u000A                     [\u0022SegmentPane.prototype.add_ \u003D { stroke: SegmentPane.STROKE, fill: \u0026#39\u003B#cfc\u0026#39\u003B }\u003B\u0022, \u0022SegmentPane.prototype.del_ \u003D { stroke: SegmentPane.STROKE, fill: \u0026#39\u003B#ffc0cb\u0026#39\u003B }\u003B\u0022, \u0022SegmentPane.prototype.mod_ \u003D { stroke: SegmentPane.STROKE, fill: \u0026#39\u003B#f4f4f4\u0026#39\u003B }\u003B\u0022],\u000A                     [\u0022SegmentPane.prototype.add_ \u003D { stroke: \u0026#39\u003B#ccffcc\u0026#39\u003B, fill: \u0026#39\u003B#ccffcc\u0026#39\u003B }\u003B\u0022, \u0022SegmentPane.prototype.del_ \u003D { stroke: \u0026#39\u003B#ffdddd\u0026#39\u003B, fill: \u0026#39\u003B#ffdddd\u0026#39\u003B }\u003B\u0022, \u0022SegmentPane.prototype.mod_ \u003D { stroke: \u0026#39\u003B#f4f4f4\u0026#39\u003B, fill: \u0026#39\u003B#f4f4f4\u0026#39\u003B }\u003B\u0022])\u000A    \u000A    \u000A    \u000A    ,\u000A  \u000A    \u000A      new FECRU.SBS.Hunk(FECRU.SBS.Range.pointBeforeLine(323),\u000A               FECRU.SBS.Range.ofLength(415, 1),\u000A               [],\u000A               [\u0022SegmentPane.prototype.border_ \u003D { stroke: \u0026#39\u003B#ccc\u0026#39\u003B, fill: \u0026#39\u003B#ccc\u0026#39\u003B }\u003B\u0022])\u000A    \u000A    \u000A    \u000A    \u000A    ,\u000A  \u000A    \u000A      new FECRU.SBS.Hunk(FECRU.SBS.Range.pointBeforeLine(338),\u000A               FECRU.SBS.Range.ofLength(431, 6),\u000A               [],\u000A               [\u0022SegmentPane.prototype.createBorder_ \u003D function () {\u0022, \u0022  var path \u003D this.canvas_.path()\u003B\u0022, \u0022  path.attr(this.border_)\u003B\u0022, \u0022  return path\u003B\u0022, \u0022}\u003B\u0022, \u0022\u0022])\u000A    \u000A    \u000A    \u000A    \u000A    ,\u000A  \u000A    \u000A    \u000A      FECRU.SBS.Hunk.ofLengths(357,\u000A                     1,\u000A                     456,\u000A                     1,\u000A                     [\u0022        path \u003D hunk.path || (hunk.path \u003D this.createPath_(hunk))\u003B\u0022],\u000A                     [\u0022        width \u003D this.width\u003B\u0022])\u000A    \u000A    \u000A    \u000A    ,\u000A  \u000A    \u000A    \u000A      FECRU.SBS.Hunk.ofLengths(359,\u000A                     2,\u000A                     458,\u000A                     2,\u000A                     [\u0022    this.visiblePaths_.push(path)\u003B\u0022, \u0022    var width \u003D this.width\u003B\u0022],\u000A                     [\u0022    // Draw the segments (without borders).\u0022, \u0022    var path \u003D hunk.path || (hunk.path \u003D this.createPath_(hunk))\u003B\u0022])\u000A    \u000A    \u000A    \u000A    ,\u000A  \u000A    \u000A    \u000A    \u000A      new FECRU.SBS.Hunk(FECRU.SBS.Range.ofLength(362, 1),\u000A               FECRU.SBS.Range.pointBeforeLine(461),\u000A               [\u0022      // TODO Draw a border around conflict sections.\u0022],\u000A               [])\u000A    \u000A    \u000A    ,\u000A  \u000A    \u000A    \u000A      FECRU.SBS.Hunk.ofLengths(379,\u000A                     1,\u000A                     477,\u000A                     1,\u000A                     [\u0022        [\u0026#39\u003BM\u0026#39\u003B, 0, this.lineTopPx(fromRange.low \u002D fromLine + 1) \u002D fromy],\u0022],\u000A                     [\u0022        [\u0026#39\u003BM\u0026#39\u003B, 0, this.lineTopPx(fromRange.low \u002D fromLine + 1) \u002D fromy + 1],\u0022])\u000A    \u000A    \u000A    \u000A    ,\u000A  \u000A    \u000A    \u000A      FECRU.SBS.Hunk.ofLengths(381,\u000A                     1,\u000A                     479,\u000A                     1,\u000A                     [\u0022        [\u0026#39\u003BL\u0026#39\u003B, width, this.lineBottomPx(toRange.low \u002D toLine + 1) \u002D toy],\u0022],\u000A                     [\u0022        [\u0026#39\u003BL\u0026#39\u003B, width, this.lineBottomPx(toRange.low \u002D toLine + 1) \u002D toy + 1],\u0022])\u000A    \u000A    \u000A    \u000A    ,\u000A  \u000A    \u000A      new FECRU.SBS.Hunk(FECRU.SBS.Range.pointBeforeLine(386),\u000A               FECRU.SBS.Range.ofLength(484, 55),\u000A               [],\u000A               [\u0022    this.visiblePaths_.push(path)\u003B\u0022, \u0022\u0022, \u0022    // Draw the top and bottom border for the path.\u0022, \u0022    var border \u003D hunk.borderPath || this.createBorder_()\u003B\u0022, \u0022    if (hunk.isAddition()) {\u0022, \u0022\u0022, \u0022      if (hunk.isConflict() \u0026amp\u003B\u0026amp\u003B typeof hunk.isConflictStart !\u003D\u003D \u0026#39\u003Bboolean\u0026#39\u003B) {\u0022, \u0022        // TODO The Diff class should make these booleans available on hunks.\u0022, \u0022        var prev \u003D this.sbsdiff.hunkBefore(hunk)\u003B\u0022, \u0022        var next \u003D this.sbsdiff.hunkAfter(hunk)\u003B\u0022, \u0022        hunk.isConflictStart \u003D next \u0026amp\u003B\u0026amp\u003B next.isConflict() \u0026amp\u003B\u0026amp\u003B next.isChange()\u003B\u0022, \u0022        hunk.isEntireConflict \u003D\u0022, \u0022          !(prev \u0026amp\u003B\u0026amp\u003B prev.isConflict() \u0026amp\u003B\u0026amp\u003B prev.isChange()) \u0026amp\u003B\u0026amp\u003B\u0022, \u0022          !(next \u0026amp\u003B\u0026amp\u003B next.isConflict() \u0026amp\u003B\u0026amp\u003B next.isChange())\u003B\u0022, \u0022      }\u0022, \u0022\u0022, \u0022      if (hunk.isConflict() \u0026amp\u003B\u0026amp\u003B !hunk.isEntireConflict) {\u0022, \u0022        if (hunk.isConflictStart) {\u0022, \u0022          border.attr(\u0026#39\u003Bpath\u0026#39\u003B, [\u0022, \u0022            [\u0026#39\u003BM\u0026#39\u003B, 0, this.lineBottomPx(fromRange.low \u002D fromLine + 1) \u002D fromy + 1],\u0022, \u0022            [\u0026#39\u003BL\u0026#39\u003B, width, this.lineTopPx(toRange.low \u002D toLine + 1) \u002D toy]\u0022, \u0022          ])\u003B\u0022, \u0022        } else {\u0022, \u0022          border.attr(\u0026#39\u003Bpath\u0026#39\u003B, [\u0022, \u0022            [\u0026#39\u003BM\u0026#39\u003B, width, this.lineBottomPx(toRange.high \u002D toLine + 1) \u002D toy],\u0022, \u0022            [\u0026#39\u003BL\u0026#39\u003B, 0, this.lineBottomPx(fromRange.low \u002D fromLine + 1) \u002D fromy + 1]\u0022, \u0022          ])\u003B\u0022, \u0022        }\u0022, \u0022      } else {\u0022, \u0022        // Normal addition hunks and conflict hunks that are only an addition.\u0022, \u0022        border.attr(\u0026#39\u003Bpath\u0026#39\u003B, [\u0022, \u0022          [\u0026#39\u003BM\u0026#39\u003B, 0, this.lineBottomPx(fromRange.low \u002D fromLine + 1) \u002D fromy + 1],\u0022, \u0022          [\u0026#39\u003BL\u0026#39\u003B, width, this.lineTopPx(toRange.low \u002D toLine + 1) \u002D toy],\u0022, \u0022          [\u0026#39\u003BM\u0026#39\u003B, width, this.lineBottomPx(toRange.high \u002D toLine + 1) \u002D toy],\u0022, \u0022          [\u0026#39\u003BL\u0026#39\u003B, 0, this.lineBottomPx(fromRange.low \u002D fromLine + 1) \u002D fromy + 1]\u0022, \u0022        ])\u003B\u0022, \u0022      }\u0022, \u0022\u0022, \u0022    } else if (hunk.isChange() \u0026amp\u003B\u0026amp\u003B !hunk.isConflict()) {\u0022, \u0022      border.attr(\u0026#39\u003Bpath\u0026#39\u003B, [\u0022, \u0022        [\u0026#39\u003BM\u0026#39\u003B, 0, this.lineTopPx(fromRange.low \u002D fromLine + 1) \u002D fromy + 1],\u0022, \u0022        [\u0026#39\u003BL\u0026#39\u003B, width, this.lineTopPx(toRange.low \u002D toLine + 1) \u002D toy + 1],\u0022, \u0022        [\u0026#39\u003BM\u0026#39\u003B, width, this.lineBottomPx(toRange.high \u002D toLine + 1) \u002D toy],\u0022, \u0022        [\u0026#39\u003BL\u0026#39\u003B, 0, this.lineBottomPx(fromRange.high \u002D fromLine + 1) \u002D fromy]\u0022, \u0022      ])\u003B\u0022, \u0022    } else if (hunk.isDeletion()) {\u0022, \u0022      border.attr(\u0026#39\u003Bpath\u0026#39\u003B, [\u0022, \u0022        [\u0026#39\u003BM\u0026#39\u003B, width, this.lineBottomPx(toRange.low \u002D toLine + 1) \u002D toy + 1],\u0022, \u0022        [\u0026#39\u003BL\u0026#39\u003B, 0, this.lineTopPx(fromRange.low \u002D fromLine + 1) \u002D fromy],\u0022, \u0022        [\u0026#39\u003BM\u0026#39\u003B, 0, this.lineBottomPx(fromRange.high \u002D fromLine + 1) \u002D fromy],\u0022, \u0022        [\u0026#39\u003BL\u0026#39\u003B, width, this.lineBottomPx(toRange.low \u002D toLine + 1) \u002D toy + 1]\u0022, \u0022      ])\u003B\u0022, \u0022    }\u0022, \u0022    border.show()\u003B\u0022, \u0022    this.visiblePaths_.push(border)\u003B\u0022])\u000A    \u000A    \u000A    \u000A    \u000A    ,\u000A  \u000A    \u000A    \u000A      FECRU.SBS.Hunk.ofLengths(390,\u000A                     1,\u000A                     543,\u000A                     1,\u000A                     [\u0022var HunkMap \u003D diffract.HunkMap \u003D function (hunks, side, numLines) {\u0022],\u000A                     [\u0022var HunkMap \u003D diffract.HunkMap \u003D function (hunks, side, numLines, lineHeight) {\u0022])\u000A    \u000A    \u000A    \u000A    ,\u000A  \u000A    \u000A      new FECRU.SBS.Hunk(FECRU.SBS.Range.pointBeforeLine(399),\u000A               FECRU.SBS.Range.ofLength(552, 1),\u000A               [],\u000A               [\u0022  this.lineHeight \u003D lineHeight\u003B\u0022])\u000A    \u000A    \u000A    \u000A    \u000A    ,\u000A  \u000A    \u000A    \u000A      FECRU.SBS.Hunk.ofLengths(418,\u000A                     1,\u000A                     572,\u000A                     1,\u000A                     [\u0022        top: this.percent(range.low) + \u0026#39\u003B%\u0026#39\u003B,\u0022],\u000A                     [\u0022        top: this.percent(range.low \u002D 1) + \u0026#39\u003B%\u0026#39\u003B,\u0022])\u000A    \u000A    \u000A    \u000A    ,\u000A  \u000A    \u000A    \u000A      FECRU.SBS.Hunk.ofLengths(452,\u000A                     1,\u000A                     606,\u000A                     1,\u000A                     [\u0022  var heightPx \u003D this.$elem_.height()\u003B\u0022],\u000A                     [\u0022  var availableHeightPx \u003D this.$elem_.parent().height()\u003B\u0022])\u000A    \u000A    \u000A    \u000A    ,\u000A  \u000A    \u000A    \u000A      FECRU.SBS.Hunk.ofLengths(454,\u000A                     3,\u000A                     608,\u000A                     3,\u000A                     [\u0022  var marginTopPx \u003D scrolly ? scrollbarPx : 0\u003B\u0022, \u0022  var marginBottomPx \u003D\u0022, \u0022    (scrolly ? scrollbarPx : 0) + (scrollx ? scrollbarPx : 0)\u003B\u0022],\u000A                     [\u0022\u0022, \u0022  var marginTopPx \u003D (scrolly ? scrollbarPx : 0)\u003B\u0022, \u0022  var marginBottomPx \u003D marginTopPx + (scrollx ? scrollbarPx : 0)\u003B\u0022])\u000A    \u000A    \u000A    \u000A    ,\u000A  \u000A    \u000A    \u000A      FECRU.SBS.Hunk.ofLengths(460,\u000A                     1,\u000A                     614,\u000A                     4,\u000A                     [\u0022    height: heightPx \u002D marginTopPx \u002D marginBottomPx\u0022],\u000A                     [\u0022    height: Math.min(\u0022, \u0022      this.numLines* this.lineHeight,\u0022, \u0022      availableHeightPx \u002D marginTopPx \u002D marginBottomPx\u0022, \u0022    )\u0022])\u000A    \u000A    \u000A    \u000A    \u000A  \u000A  ]\u000A\u000A\u000A\u003C\u000A\u000A10\u000A\u000A\u003C\u000A\u000A100\u000A\u000A\u003C\u000A\u000A\u000A  \u000A\u000A0\u000A\u000A\u003E\u000A\u000A\u000A  [{\u0022html\u0022: \u0022(function ($, _, window) {\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022var diffract \u003D window.diffract \u003D {}\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022var Hunk \u003D FECRU.SBS.Hunk\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022var LinedPane \u003D aperture.LinedPane\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022var UnifiedDiff \u003D diffract.UnifiedDiff \u003D function (udiff, lineHeight) {\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  this.udiff_ \u003D udiff\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  this.numLines_ \u003D this.udiff_.to.numLines\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  this.lineHeight \u003D lineHeight\u003B\u0022, \u0022gutters\u0022: []}, {\u0022start\u0022: true, \u0022html\u0022: \u0022\u0022, \u0022gutters\u0022: []}, {\u0022end\u0022: true, \u0022start\u0022: true, \u0022html\u0022: \u0022  this.pane_ \u003D LinedPane.window(this.numLines_, 940, lineHeight)\u003B\u0022, \u0022gutters\u0022: [], \u0022change\u0022: true}, {\u0022html\u0022: \u0022  this.fromNumbers_ \u003D new FileNumbers(this.udiff_.from, lineHeight)\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  this.unifiedLines_ \u003D new ScrollableFilePane(this.udiff_.to, lineHeight)\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  this.$elem_ \u003D null\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022}\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022UnifiedDiff.prototype.createDom \u003D function () {\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  // Decorate this.pane_.\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022}\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022UnifiedDiff.prototype.render \u003D function ($parent) {\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  this.createDom()\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  this.pane_.render($parent)\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  this.$elem_ \u003D this.pane_.$content()\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022    .addClass(\u0026#39\u003Bdiffract diffract\u002Dudiff\u0026#39\u003B)\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  $parent.append(this.$elem_)\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  this.fromNumbers_.render(this.pane_.$content())\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  this.unifiedLines_.render(this.pane_.$content())\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022\u0022, \u0022gutters\u0022: []}, {\u0022end\u0022: true, \u0022start\u0022: true, \u0022html\u0022: \u0022  this.unifiedLines_.setPaneWidth(940 \u002D 30)\u003B\u0022, \u0022gutters\u0022: [], \u0022change\u0022: true}, {\u0022html\u0022: \u0022  this.showVisibleLines_()\u003B\u0022, \u0022gutters\u0022: []}, {\u0022end\u0022: true, \u0022start\u0022: true, \u0022html\u0022: \u0022\u0022, \u0022gutters\u0022: [], \u0022deletion\u0022: true}, {\u0022html\u0022: \u0022  this.enterDocument()\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022}\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022UnifiedDiff.prototype.enterDocument \u003D function () {\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  $(this.pane_)\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022    .bind(\u0026#39\u003Baperture\u002Dlined\u002Dpane/scroll\u0026#39\u003B, $.proxy(this.showVisibleLines_, this))\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  this.fromNumbers_.$elem_.add(this.unifiedLines_.$elem_)\u0022, \u0022gutters\u0022: []}, {\u0022end\u0022: true, \u0022start\u0022: true, \u0022html\u0022: \u0022    .delegate(\u0026#39\u003B.skipped\u0026#39\u003B, \u0026#39\u003Bclick.skipped\u0026#39\u003B, $.proxy(this.expand, this))\u003B\u0022, \u0022gutters\u0022: [], \u0022change\u0022: true}, {\u0022html\u0022: \u0022}\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022UnifiedDiff.prototype.exitDocument \u003D function () {\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  $(this.pane_).unbind(\u0026#39\u003Baperture\u002Dlined\u002Dpane/scroll\u0026#39\u003B)\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  $([this.fromNumbers_.$elem_, this.unifiedLines_.$elem_])\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022    .undelegate(\u0026#39\u003Bclick.skipped\u0026#39\u003B)\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  this.fromNumbers_.exitDocument()\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  this.unifiedLines_.exitDocument()\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  this.pane_.exitDocument()\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022}\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022UnifiedDiff.prototype.showVisibleLines_ \u003D function (e, lineNum, x, y) {\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  var range \u003D this.pane_.visibleRange()\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  if (range) {\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022    this.udiff_.ensureVisible(new Hunk(range, range))\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  }\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022}\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022\u0022, \u0022gutters\u0022: []}, {\u0022end\u0022: true, \u0022start\u0022: true, \u0022html\u0022: \u0022UnifiedDiff.prototype.expand \u003D function (e) {\u0022, \u0022gutters\u0022: [], \u0022change\u0022: true}, {\u0022html\u0022: \u0022  // TODO Replace .closest() with $(e.delegateTarget) in jQuery 1.7.\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  var $skipped \u003D $(e.target).closest(\u0026#39\u003B.skipped\u0026#39\u003B)\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  $(this).trigger(\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022    \u0026#39\u003Bdiffract\u002Dskipped/click\u0026#39\u003B, [$skipped, $skipped.data(\u0026#39\u003Bskipped\u002Dindex\u0026#39\u003B)]\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  )\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022}\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022\u0022, \u0022gutters\u0022: []}, {\u0022start\u0022: true, \u0022html\u0022: \u0022\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022var SideBySideDiff \u003D diffract.SideBySideDiff \u003D function (sbsdiff, lineHeight) {\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  this.sbsdiff_ \u003D sbsdiff\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  this.lineHeight \u003D lineHeight\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  this.focusOffset \u003D 5\u003B\u0022, \u0022gutters\u0022: []}, {\u0022start\u0022: true, \u0022html\u0022: \u0022\u0022, \u0022gutters\u0022: []}, {\u0022end\u0022: true, \u0022start\u0022: true, \u0022html\u0022: \u0022  this.fromHunkMap_ \u003D new HunkMap(this.sbsdiff_.hunks, \u0026#39\u003Bfrom\u0026#39\u003B, this.sbsdiff_.from.numLines, true, true)\u003B\u0022, \u0022gutters\u0022: [], \u0022change\u0022: true}, {\u0022html\u0022: \u0022  this.fromFile_ \u003D new ScrollableFilePane(this.sbsdiff_.from, lineHeight)\u003B\u0022, \u0022gutters\u0022: []}, {\u0022end\u0022: true, \u0022start\u0022: true, \u0022html\u0022: \u0022  this.segments_ \u003D new SegmentPane(lineHeight)\u003B\u0022, \u0022gutters\u0022: [], \u0022change\u0022: true}, {\u0022html\u0022: \u0022  this.toFile_ \u003D new ScrollableFilePane(this.sbsdiff_.to, lineHeight)\u003B\u0022, \u0022gutters\u0022: []}, {\u0022end\u0022: true, \u0022start\u0022: true, \u0022html\u0022: \u0022  this.toHunkMap_ \u003D new HunkMap(this.sbsdiff_.hunks, \u0026#39\u003Bto\u0026#39\u003B, this.sbsdiff_.to.numLines, true, true)\u003B\u0022, \u0022gutters\u0022: [], \u0022change\u0022: true}, {\u0022html\u0022: \u0022\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  this.$elem_ \u003D null\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022}\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022SideBySideDiff.prototype.createDom \u003D function () {\u0022, \u0022gutters\u0022: []}, {\u0022start\u0022: true, \u0022html\u0022: \u0022  this.$elem_ \u003D $(\u0026#39\u003B\u0026lt\u003Bdiv class\u003D\u0026quot\u003Bdiffract diffract\u002Dsbsdiff\u0026quot\u003B\u0026gt\u003B\u0026#39\u003B)\u0022, \u0022gutters\u0022: [], \u0022change\u0022: true}, {\u0022end\u0022: true, \u0022html\u0022: \u0022    .height($(window).height() * 0.95)\u003B\u0022, \u0022gutters\u0022: [], \u0022change\u0022: true}, {\u0022html\u0022: \u0022}\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022SideBySideDiff.prototype.render \u003D function ($parent) {\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  this.createDom()\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  $parent.append(this.$elem_)\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  this.fromHunkMap_.render(this.$elem_)\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  this.fromFile_.render(this.$elem_)\u003B\u0022, \u0022gutters\u0022: []}]\u000A  \u000A    \u003E\u000A  \u000A\u000A  [{\u0022html\u0022: \u0022  this.segments_.render(this.$elem_)\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  this.toFile_.render(this.$elem_)\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  this.toHunkMap_.render(this.$elem_)\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022\u0022, \u0022gutters\u0022: []}, {\u0022start\u0022: true, \u0022html\u0022: \u0022  var width \u003D (this.$elem_.width() \u002D 30) / 2\u003B\u0022, \u0022gutters\u0022: [], \u0022change\u0022: true}, {\u0022html\u0022: \u0022  this.fromFile_.setPaneWidth(width)\u003B\u0022, \u0022gutters\u0022: [], \u0022change\u0022: true}, {\u0022html\u0022: \u0022  this.segments_.setPaneWidth(30)\u003B\u0022, \u0022gutters\u0022: [], \u0022change\u0022: true}, {\u0022end\u0022: true, \u0022html\u0022: \u0022  this.toFile_.setPaneWidth(width)\u003B\u0022, \u0022gutters\u0022: [], \u0022change\u0022: true}, {\u0022html\u0022: \u0022\u0022, \u0022gutters\u0022: []}, {\u0022start\u0022: true, \u0022html\u0022: \u0022  this.fromHunkMap_.scrollbars(this.fromFile_.scrollx(), this.fromFile_.scrolly())\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  this.toHunkMap_.scrollbars(this.toFile_.scrollx(), this.toFile_.scrolly())\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022\u0022, \u0022gutters\u0022: []}, {\u0022end\u0022: true, \u0022start\u0022: true, \u0022html\u0022: \u0022  this.enterDocument()\u003B\u0022, \u0022gutters\u0022: [], \u0022change\u0022: true}, {\u0022html\u0022: \u0022}\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022SideBySideDiff.prototype.enterDocument \u003D function () {\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  $([this.fromFile_, this.toFile_])\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022    .bind(\u0026#39\u003Bscrollable\u002Dfile\u002Dpane/scroll\u0026#39\u003B, $.proxy(this.onScroll_, this))\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  $([this.fromHunkMap_, this.toHunkMap_])\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022    .bind(\u0026#39\u003Bhunk\u002Dmap/click\u0026#39\u003B, $.proxy(this.onHunkMapClick_, this))\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022}\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022SideBySideDiff.prototype.exitDocument \u003D function () {\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  $([this.fromFile_, this.toFile_])\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022    .unbind(\u0026#39\u003Bscrollable\u002Dfile\u002Dpane/scroll\u0026#39\u003B)\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  $([this.fromHunkMap_, this.toHunkMap_])\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022    .unbind(\u0026#39\u003Bhunk\u002Dmap/click\u0026#39\u003B)\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  this.fromHunkMap_.exitDocument()\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  this.fromFile_.exitDocument()\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  this.segments_.exitDocument()\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  this.toFile_.exitDocument()\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  this.toHunkMap_.exitDocument()\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022}\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022SideBySideDiff.prototype.onScroll_ \u003D function (e, lineNum, x, y) {\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  var scrolled \u003D e.target\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  var other \u003D scrolled \u003D\u003D\u003D this.fromFile_ ? this.toFile_ : this.fromFile_\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  var otherLine \u003D scrolled.file_.position\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  var focusedLineNum \u003D Math.min(lineNum + this.focusOffset, scrolled.numLines)\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  var otherFocusedLineNum \u003D otherLine[focusedLineNum]\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  var pivoting \u003D otherLine[focusedLineNum \u002D 1] \u003D\u003D\u003D otherFocusedLineNum\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  var othery \u003D pivoting ? this.lineHeight : y\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  var otherLineNum \u003D Math.max(\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022    pivoting ? 0 : 1,  // when pivoting othery is the equivalent of one line\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022    otherFocusedLineNum \u002D this.focusOffset\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  )\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  var tuple \u003D other.scrollToLine(otherLineNum, x, othery)\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  otherLineNum \u003D tuple[0]\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  othery \u003D tuple[2]\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  var viewport \u003D new Hunk(\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022    this.fromFile_.visibleRange(),\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022    this.toFile_.visibleRange()\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  )\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  this.sbsdiff_.ensureVisible(viewport)\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  var isFrom \u003D scrolled \u003D\u003D\u003D this.fromFile_\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  this.segments_.draw(\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022    viewport.overlapping(this.sbsdiff_.hunks),\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022    isFrom ? lineNum : otherLineNum,\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022    isFrom ? y : othery,\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022    isFrom ? otherLineNum : lineNum,\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022    isFrom ? othery : y\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022 )\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022}\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022SideBySideDiff.prototype.onHunkMapClick_ \u003D function (e, lineNum) {\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  var file \u003D e.target \u003D\u003D\u003D this.fromHunkMap_ ? this.fromFile_ : this.toFile_\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  file.scrollToLineAndFire(lineNum \u002D this.focusOffset, 0, 0)\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022}\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022\u0022, \u0022gutters\u0022: []}, {\u0022start\u0022: true, \u0022html\u0022: \u0022\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022var FileNumbers \u003D diffract.FileNumbers \u003D function (file, lineHeight) {\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  this.file_ \u003D file\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  this.lineHeight \u003D lineHeight\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  this.$elem_ \u003D null\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022}\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022FileNumbers.prototype.createDom \u003D function () {\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  this.$elem_ \u003D $(\u0026#39\u003B\u0026lt\u003Bdiv class\u003D\u0026quot\u003Bfile\u002Dnumbers\u0026quot\u003B\u0026gt\u003B\u0026#39\u003B)\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  this.file_.lineHeightPx \u003D this.lineHeight\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  this.file_.numbersBoxDom \u003D this.$elem_[0]\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  // Don\u0026#39\u003Bt render file lines.\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  this.file_.scrollBoxDom \u003D $(\u0026#39\u003B\u0026lt\u003Bdiv\u0026gt\u003B\u0026#39\u003B)[0]\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022}\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022FileNumbers.prototype.render \u003D function ($parent) {\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  this.createDom()\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  $parent.append(this.$elem_)\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  this.enterDocument()\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022}\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022FileNumbers.prototype.enterDocument \u003D function () {}\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022FileNumbers.prototype.exitDocument \u003D function () {}\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022\u0022, \u0022gutters\u0022: []}]\u000A  \u000A    \u003E\u000A  \u000A\u000A  [{\u0022html\u0022: \u0022\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022var ScrollableFilePane \u003D diffract.ScrollableFilePane \u003D function (file, lineHeight) {\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  this.file_ \u003D file\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  this.lineHeight \u003D lineHeight\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  this.numLines \u003D file.numLines\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022\u0022, \u0022gutters\u0022: []}, {\u0022end\u0022: true, \u0022start\u0022: true, \u0022html\u0022: \u0022  this.numbers_ \u003D LinedPane.scrollable(file.numLines, 30, lineHeight)\u003B\u0022, \u0022gutters\u0022: [], \u0022change\u0022: true}, {\u0022html\u0022: \u0022  this.lines_ \u003D LinedPane.scrollable(\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022    file.numLines, this.file_.longestLineDom(), lineHeight\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  )\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  this.$elem_ \u003D null\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022}\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022ScrollableFilePane.prototype.createDom \u003D function () {\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  this.$elem_ \u003D $(\u0026#39\u003B\u0026lt\u003Bdiv class\u003D\u0026quot\u003Bscrollable\u002Dfile\u002Dpane\u0026quot\u003B\u0026gt\u003B\u0026#39\u003B)\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022}\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022ScrollableFilePane.prototype.render \u003D function ($parent) {\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  this.createDom()\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  $parent.append(this.$elem_)\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  this.numbers_.render(this.$elem_)\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  this.lines_.render(this.$elem_)\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  this.numbers_.$elem_.addClass(\u0026#39\u003Bscrollable\u002Dfile\u002Dpane\u002Dnumbers\u0026#39\u003B)\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  this.numbers_.$content().addClass(\u0026#39\u003Bfile\u002Dnumbers\u0026#39\u003B)\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  this.lines_.$elem_.addClass(\u0026#39\u003Bscrollable\u002Dfile\u002Dpane\u002Dlines\u0026#39\u003B)\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  this.lines_.$content().addClass(\u0026#39\u003Bfile\u002Dlines\u0026#39\u003B)\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  this.file_.lineHeightPx \u003D this.lineHeight\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  this.file_.numbersBoxDom \u003D this.numbers_.$content()[0]\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  this.file_.scrollBoxDom \u003D this.lines_.$content()[0]\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  this.enterDocument()\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022}\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022ScrollableFilePane.prototype.setPaneWidth \u003D function (paneWidth) {\u0022, \u0022gutters\u0022: []}, {\u0022start\u0022: true, \u0022html\u0022: \u0022  this.numbers_.setPaneWidth(30)\u003B\u0022, \u0022gutters\u0022: [], \u0022change\u0022: true}, {\u0022end\u0022: true, \u0022html\u0022: \u0022  this.lines_.setPaneWidth(paneWidth \u002D 30)\u003B\u0022, \u0022gutters\u0022: [], \u0022change\u0022: true}, {\u0022html\u0022: \u0022}\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022ScrollableFilePane.prototype.scrollx \u003D function () {\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  return this.lines_.scrollx()\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022}\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022ScrollableFilePane.prototype.scrolly \u003D function () {\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  return this.lines_.scrolly()\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022}\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022ScrollableFilePane.prototype.enterDocument \u003D function () {\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  $(this.lines_)\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022    .bind(\u0026#39\u003Baperture\u002Dlined\u002Dpane/scroll\u0026#39\u003B, $.proxy(this.onScroll_, this))\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022}\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022ScrollableFilePane.prototype.exitDocument \u003D function () {\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  $(this.lines_).unbind(\u0026#39\u003Baperture\u002Dlined\u002Dpane/scroll\u0026#39\u003B)\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  this.numbers_.exitDocument()\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  this.lines_.exitDocument()\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022}\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022ScrollableFilePane.prototype.onScroll_ \u003D function (e, lineNum, x, y) {\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  this.numbers_.scrollToLine(lineNum, x, y)\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  $(this).trigger(\u0026#39\u003Bscrollable\u002Dfile\u002Dpane/scroll\u0026#39\u003B, [lineNum, x, y])\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022}\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022ScrollableFilePane.prototype.scrollToLine \u003D function (lineNum, x, y) {\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  var tuple \u003D this.lines_.scrollToLine(lineNum, x, y)\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  this.numbers_.scrollToLine(tuple[0], tuple[1], tuple[2])\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  return tuple\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022}\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022ScrollableFilePane.prototype.scrollToLineAndFire \u003D function (lineNum, x, y) {\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  var tuple \u003D this.scrollToLine(lineNum, x, y)\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  $(this).trigger(\u0026#39\u003Bscrollable\u002Dfile\u002Dpane/scroll\u0026#39\u003B, tuple)\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022}\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022ScrollableFilePane.prototype.visibleRange \u003D function () {\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  return this.lines_.visibleRange()\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022}\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022\u0022, \u0022gutters\u0022: []}, {\u0022end\u0022: true, \u0022start\u0022: true, \u0022html\u0022: \u0022var SegmentPane \u003D window.SegmentPane \u003D function (lineHeight) {\u0022, \u0022gutters\u0022: [], \u0022change\u0022: true}, {\u0022html\u0022: \u0022  this.lineHeight \u003D lineHeight\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  this.width \u003D null\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  this.$elem_ \u003D null\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  this.canvas_ \u003D null\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  this.visiblePaths_ \u003D []\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022}\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022SegmentPane.prototype.createDom \u003D function () {\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  this.$elem_ \u003D $(\u0026#39\u003B\u0026lt\u003Bdiv class\u003D\u0026quot\u003Bsegment\u002Dpane\u0026quot\u003B\u0026gt\u003B\u0026#39\u003B)\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  this.canvas_ \u003D new Raphael(this.$elem_[0])\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  if (this.width !\u003D\u003D null) {\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022    this.setPaneWidth(this.width)\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  }\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022}\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022\u0022, \u0022gutters\u0022: []}]\u000A  \u000A    \u003E\u000A  \u000A\u000A  [{\u0022html\u0022: \u0022SegmentPane.prototype.render \u003D function ($parent) {\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  this.createDom()\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  $parent.append(this.$elem_)\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  this.enterDocument()\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022}\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022SegmentPane.prototype.enterDocument \u003D function () {}\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022SegmentPane.prototype.exitDocument \u003D function () {}\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022SegmentPane.prototype.setPaneWidth \u003D function (width) {\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  this.width \u003D width\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  if (this.$elem_ !\u003D\u003D null) {\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022    this.$elem_.width(width)\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022    this.canvas_.setSize(width, this.$elem_.height())\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  }\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022}\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022SegmentPane.STROKE \u003D \u0026#39\u003B#ccc\u0026#39\u003B\u003B\u0022, \u0022gutters\u0022: []}, {\u0022start\u0022: true, \u0022html\u0022: \u0022SegmentPane.prototype.add_ \u003D { stroke: SegmentPane.STROKE, fill: \u0026#39\u003B#cfc\u0026#39\u003B }\u003B\u0022, \u0022gutters\u0022: [], \u0022change\u0022: true}, {\u0022html\u0022: \u0022SegmentPane.prototype.del_ \u003D { stroke: SegmentPane.STROKE, fill: \u0026#39\u003B#ffc0cb\u0026#39\u003B }\u003B\u0022, \u0022gutters\u0022: [], \u0022change\u0022: true}, {\u0022end\u0022: true, \u0022html\u0022: \u0022SegmentPane.prototype.mod_ \u003D { stroke: SegmentPane.STROKE, fill: \u0026#39\u003B#f4f4f4\u0026#39\u003B }\u003B\u0022, \u0022gutters\u0022: [], \u0022change\u0022: true}, {\u0022html\u0022: \u0022SegmentPane.prototype.con_ \u003D { stroke: \u0026#39\u003B#ffffe0\u0026#39\u003B, fill: \u0026#39\u003B#ffffe0\u0026#39\u003B }\u003B\u0022, \u0022gutters\u0022: []}, {\u0022start\u0022: true, \u0022html\u0022: \u0022\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022SegmentPane.prototype.createPath_ \u003D function (hunk) {\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  var path \u003D this.canvas_.path()\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  if (hunk.isConflict()) {\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022      path.attr(this.con_)\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  } else if (hunk.isAddition()) {\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022      path.attr(this.add_)\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  } else if (hunk.isChange()) {\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022      path.attr(this.mod_)\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  } else if (hunk.isDeletion()) {\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022      path.attr(this.del_)\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  }\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  return path\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022}\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022\u0022, \u0022gutters\u0022: []}, {\u0022start\u0022: true, \u0022html\u0022: \u0022SegmentPane.prototype.lineTopPx \u003D function (lineNum) {\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  return (lineNum \u002D 1) * this.lineHeight\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022}\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022SegmentPane.prototype.lineBottomPx \u003D function (lineNum) {\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  return lineNum * this.lineHeight\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022}\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022SegmentPane.prototype.draw \u003D function (hunks, fromLine, fromy, toLine, toy) {\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  var i, len\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  for (i \u003D 0, len \u003D this.visiblePaths_.length\u003B i \u0026lt\u003B len\u003B i++) {\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022    this.visiblePaths_[i].hide()\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  }\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  this.visiblePaths_ \u003D []\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  for (i \u003D 0, len \u003D hunks.length\u003B i \u0026lt\u003B len\u003B i++) {\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022    var hunk \u003D hunks[i],\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022        fromRange \u003D hunk.fromRange,\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022        toRange \u003D hunk.toRange,\u0022, \u0022gutters\u0022: []}, {\u0022end\u0022: true, \u0022start\u0022: true, \u0022html\u0022: \u0022        path \u003D hunk.path || (hunk.path \u003D this.createPath_(hunk))\u003B\u0022, \u0022gutters\u0022: [], \u0022change\u0022: true}, {\u0022html\u0022: \u0022\u0022, \u0022gutters\u0022: []}, {\u0022start\u0022: true, \u0022html\u0022: \u0022    this.visiblePaths_.push(path)\u003B\u0022, \u0022gutters\u0022: [], \u0022change\u0022: true}, {\u0022end\u0022: true, \u0022html\u0022: \u0022    var width \u003D this.width\u003B\u0022, \u0022gutters\u0022: [], \u0022change\u0022: true}, {\u0022html\u0022: \u0022    if (hunk.isAddition()) {\u0022, \u0022gutters\u0022: []}, {\u0022end\u0022: true, \u0022start\u0022: true, \u0022html\u0022: \u0022      // TODO Draw a border around conflict sections.\u0022, \u0022gutters\u0022: [], \u0022deletion\u0022: true}, {\u0022html\u0022: \u0022      path.attr(\u0026#39\u003Bpath\u0026#39\u003B, [\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022        [\u0026#39\u003BM\u0026#39\u003B, 0, this.lineBottomPx(fromRange.low \u002D fromLine + 1) \u002D fromy + 1],\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022        [\u0026#39\u003BL\u0026#39\u003B, width, this.lineTopPx(toRange.low \u002D toLine + 1) \u002D toy + 1],\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022        [\u0026#39\u003BV\u0026#39\u003B, this.lineBottomPx(toRange.high \u002D toLine + 1) \u002D toy],\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022        [\u0026#39\u003BZ\u0026#39\u003B]\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022      ])\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022    } else if (hunk.isChange()) {\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022      path.attr(\u0026#39\u003Bpath\u0026#39\u003B, [\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022        [\u0026#39\u003BM\u0026#39\u003B, 0, this.lineTopPx(fromRange.low \u002D fromLine + 1) \u002D fromy + 1],\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022        [\u0026#39\u003BL\u0026#39\u003B, width, this.lineTopPx(toRange.low \u002D toLine + 1) \u002D toy + 1],\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022        [\u0026#39\u003BV\u0026#39\u003B, this.lineBottomPx(toRange.high \u002D toLine + 1) \u002D toy],\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022        [\u0026#39\u003BL\u0026#39\u003B, 0, this.lineBottomPx(fromRange.high \u002D fromLine + 1) \u002D fromy],\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022        [\u0026#39\u003BZ\u0026#39\u003B]\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022      ])\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022    } else if (hunk.isDeletion()) {\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022      path.attr(\u0026#39\u003Bpath\u0026#39\u003B, [\u0022, \u0022gutters\u0022: []}, {\u0022end\u0022: true, \u0022start\u0022: true, \u0022html\u0022: \u0022        [\u0026#39\u003BM\u0026#39\u003B, 0, this.lineTopPx(fromRange.low \u002D fromLine + 1) \u002D fromy],\u0022, \u0022gutters\u0022: [], \u0022change\u0022: true}, {\u0022html\u0022: \u0022        [\u0026#39\u003BV\u0026#39\u003B, this.lineBottomPx(fromRange.high \u002D fromLine + 1) \u002D fromy],\u0022, \u0022gutters\u0022: []}, {\u0022end\u0022: true, \u0022start\u0022: true, \u0022html\u0022: \u0022        [\u0026#39\u003BL\u0026#39\u003B, width, this.lineBottomPx(toRange.low \u002D toLine + 1) \u002D toy],\u0022, \u0022gutters\u0022: [], \u0022change\u0022: true}, {\u0022html\u0022: \u0022        [\u0026#39\u003BZ\u0026#39\u003B]\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022      ])\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022    }\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022    path.show()\u003B\u0022, \u0022gutters\u0022: []}, {\u0022start\u0022: true, \u0022html\u0022: \u0022  }\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022}\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022\u0022, \u0022gutters\u0022: []}, {\u0022end\u0022: true, \u0022start\u0022: true, \u0022html\u0022: \u0022var HunkMap \u003D diffract.HunkMap \u003D function (hunks, side, numLines) {\u0022, \u0022gutters\u0022: [], \u0022change\u0022: true}, {\u0022html\u0022: \u0022  this.hunks \u003D _.filter(hunks, function (h) {\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022    if (side \u003D\u003D\u003D \u0026#39\u003Bfrom\u0026#39\u003B) {\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022      return h.isDeletion() || h.isChange()\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022    } else {\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022      return h.isAddition() || h.isChange()\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022    }\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  })\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  this.numLines \u003D numLines\u003B\u0022, \u0022gutters\u0022: []}, {\u0022start\u0022: true, \u0022html\u0022: \u0022  this.side \u003D side\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022\u0022, \u0022gutters\u0022: []}]\u000A  \u000A    \u003E\u000A  \u000A\u000A  [{\u0022html\u0022: \u0022  this.$window_ \u003D null\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  this.$elem_ \u003D null\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022}\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022HunkMap.prototype.createDom \u003D function () {\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  this.$window_ \u003D $(window)\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  this.$elem_ \u003D $(\u0026#39\u003B\u0026lt\u003Bdiv class\u003D\u0026quot\u003Bhunk\u002Dmap\u0026quot\u003B\u0026gt\u003B\u0026#39\u003B)\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  var isFrom \u003D this.side \u003D\u003D\u003D \u0026#39\u003Bfrom\u0026#39\u003B\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  var tag \u003D isFrom ? \u0026#39\u003B\u0026lt\u003Bdel\u0026gt\u003B\u0026#39\u003B : \u0026#39\u003B\u0026lt\u003Bins\u0026gt\u003B\u0026#39\u003B\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  for (var i \u003D 0\u003B i \u0026lt\u003B this.hunks.length\u003B i++) {\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022    var hunk \u003D this.hunks[i]\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022    var range \u003D isFrom ? hunk.fromRange : hunk.toRange\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022    var $hunk \u003D $(tag)\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022      .toggleClass(\u0026#39\u003Bchange\u0026#39\u003B, hunk.isChange())\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022      .toggleClass(\u0026#39\u003Bconflict\u0026#39\u003B, hunk.isConflict())\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022      .css({\u0022, \u0022gutters\u0022: []}, {\u0022end\u0022: true, \u0022start\u0022: true, \u0022html\u0022: \u0022        top: this.percent(range.low) + \u0026#39\u003B%\u0026#39\u003B,\u0022, \u0022gutters\u0022: [], \u0022change\u0022: true}, {\u0022html\u0022: \u0022        height: this.percent(range.length) + \u0026#39\u003B%\u0026#39\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022      })\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022    this.$elem_.append($hunk)\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  }\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022}\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022HunkMap.prototype.percent \u003D function (n) {\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  return (n / this.numLines) * 100\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022}\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022HunkMap.prototype.render \u003D function ($parent) {\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  this.createDom()\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  $parent.append(this.$elem_)\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  this.enterDocument()\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022}\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022HunkMap.prototype.enterDocument \u003D function () {\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  // Be forgiving to small click targets, so bind on the entire element.\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  this.$elem_.bind(\u0026#39\u003Bclick.hunk\u002Dmap\u0026#39\u003B, $.proxy(this.onClick_, this))\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022}\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022HunkMap.prototype.exitDocument \u003D function () {\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  this.$elem_.unbind(\u0026#39\u003Bclick.hunk\u002Dmap\u0026#39\u003B)\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022}\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022HunkMap.prototype.onClick_ \u003D function (e) {\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  var y \u003D e.clientY \u002D (this.$elem_.offset().top \u002D this.$window_.scrollTop())\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  var lineNum \u003D Math.round((y / this.$elem_.height()) * this.numLines)\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  lineNum \u003D Math.min(Math.max(1, lineNum), this.numLines)\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  $(this).trigger(\u0026#39\u003Bhunk\u002Dmap/click\u0026#39\u003B, [lineNum])\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022}\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022HunkMap.prototype.scrollbars \u003D function (scrollx, scrolly) {\u0022, \u0022gutters\u0022: []}, {\u0022end\u0022: true, \u0022start\u0022: true, \u0022html\u0022: \u0022  var heightPx \u003D this.$elem_.height()\u003B\u0022, \u0022gutters\u0022: [], \u0022change\u0022: true}, {\u0022html\u0022: \u0022  var scrollbarPx \u003D $.getScrollbarWidth()\u003B\u0022, \u0022gutters\u0022: []}, {\u0022start\u0022: true, \u0022html\u0022: \u0022  var marginTopPx \u003D scrolly ? scrollbarPx : 0\u003B\u0022, \u0022gutters\u0022: [], \u0022change\u0022: true}, {\u0022html\u0022: \u0022  var marginBottomPx \u003D\u0022, \u0022gutters\u0022: [], \u0022change\u0022: true}, {\u0022end\u0022: true, \u0022html\u0022: \u0022    (scrolly ? scrollbarPx : 0) + (scrollx ? scrollbarPx : 0)\u003B\u0022, \u0022gutters\u0022: [], \u0022change\u0022: true}, {\u0022html\u0022: \u0022\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  this.$elem_.css({\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022    marginTop: marginTopPx,\u0022, \u0022gutters\u0022: []}, {\u0022end\u0022: true, \u0022start\u0022: true, \u0022html\u0022: \u0022    height: heightPx \u002D marginTopPx \u002D marginBottomPx\u0022, \u0022gutters\u0022: [], \u0022change\u0022: true}, {\u0022html\u0022: \u0022  })\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022}\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022})($, _, this)\u003B\u0022, \u0022gutters\u0022: []}]\u000A  \u000A\u000A\u000A\u003E\u000A\u000A\u000A  ({\u0022numLines\u0022: 465, \u0022position\u0022: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 44, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 120, 121, 122, 123, 124, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 154, 154, 154, 155, 186, 187, 188, 189, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 618, 619, 620, 621, 622], \u0022longestLine\u0022: {\u0022html\u0022: \u0022  this.fromHunkMap_ \u003D new HunkMap(this.sbsdiff_.hunks, \u0026#39\u003Bfrom\u0026#39\u003B, this.sbsdiff_.from.numLines, true, true)\u003B\u0022}, \u0022name\u0022: \u0022from\u0022, \u0022filename\u0022: \u0022media/js/lib/diffract.js\u0022})\u000A\u000A\u000A\u000A\u000A\u003C\u000A\u000A\u000A  \u000A\u000A0\u000A\u000A\u003E\u000A\u000A\u000A  [{\u0022html\u0022: \u0022(function ($, _, window) {\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022var diffract \u003D window.diffract \u003D {}\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022var Hunk \u003D FECRU.SBS.Hunk\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022var LinedPane \u003D aperture.LinedPane\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022var UnifiedDiff \u003D diffract.UnifiedDiff \u003D function (udiff, lineHeight) {\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  this.udiff_ \u003D udiff\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  this.numLines_ \u003D this.udiff_.to.numLines\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  this.lineHeight \u003D lineHeight\u003B\u0022, \u0022gutters\u0022: []}, {\u0022addition\u0022: true, \u0022start\u0022: true, \u0022end\u0022: true, \u0022html\u0022: \u0022  this.focusOffset \u003D 5\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022\u0022, \u0022gutters\u0022: []}, {\u0022end\u0022: true, \u0022start\u0022: true, \u0022html\u0022: \u0022  this.pane_ \u003D LinedPane.window(this.numLines_, 928, lineHeight)\u003B\u0022, \u0022gutters\u0022: [], \u0022change\u0022: true}, {\u0022html\u0022: \u0022  this.fromNumbers_ \u003D new FileNumbers(this.udiff_.from, lineHeight)\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  this.unifiedLines_ \u003D new ScrollableFilePane(this.udiff_.to, lineHeight)\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  this.$elem_ \u003D null\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022}\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022UnifiedDiff.prototype.createDom \u003D function () {\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  // Decorate this.pane_.\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022}\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022UnifiedDiff.prototype.render \u003D function ($parent) {\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  this.createDom()\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  this.pane_.render($parent)\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  this.$elem_ \u003D this.pane_.$content()\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022    .addClass(\u0026#39\u003Bdiffract diffract\u002Dudiff\u0026#39\u003B)\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  $parent.append(this.$elem_)\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  this.fromNumbers_.render(this.pane_.$content())\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  this.unifiedLines_.render(this.pane_.$content())\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022\u0022, \u0022gutters\u0022: []}, {\u0022start\u0022: true, \u0022html\u0022: \u0022  var numbersWidth \u003D 35\u003B\u0022, \u0022gutters\u0022: [], \u0022change\u0022: true}, {\u0022html\u0022: \u0022  this.unifiedLines_.setPaneWidth(928 \u002D numbersWidth \u002D 1)\u003B\u0022, \u0022gutters\u0022: [], \u0022change\u0022: true}, {\u0022html\u0022: \u0022  if (this.unifiedLines_.scrollx()) {\u0022, \u0022gutters\u0022: [], \u0022change\u0022: true}, {\u0022html\u0022: \u0022    this.$elem_.css(\u0026#39\u003Bmargin\u002Dbottom\u0026#39\u003B, $.getScrollbarWidth())\u003B\u0022, \u0022gutters\u0022: [], \u0022change\u0022: true}, {\u0022html\u0022: \u0022  }\u0022, \u0022gutters\u0022: [], \u0022change\u0022: true}, {\u0022end\u0022: true, \u0022html\u0022: \u0022\u0022, \u0022gutters\u0022: [], \u0022change\u0022: true}, {\u0022html\u0022: \u0022  this.showVisibleLines_()\u003B\u0022, \u0022gutters\u0022: []}, {\u0022start\u0022: true, \u0022html\u0022: \u0022  this.enterDocument()\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022}\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022UnifiedDiff.prototype.enterDocument \u003D function () {\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  $(this.pane_)\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022    .bind(\u0026#39\u003Baperture\u002Dlined\u002Dpane/scroll\u0026#39\u003B, $.proxy(this.showVisibleLines_, this))\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  this.fromNumbers_.$elem_.add(this.unifiedLines_.$elem_)\u0022, \u0022gutters\u0022: []}, {\u0022end\u0022: true, \u0022start\u0022: true, \u0022html\u0022: \u0022    .delegate(\u0026#39\u003B.skipped\u0026#39\u003B, \u0026#39\u003Bclick.skipped\u0026#39\u003B, $.proxy(this.expandSkipped_, this))\u003B\u0022, \u0022gutters\u0022: [], \u0022change\u0022: true}, {\u0022html\u0022: \u0022}\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022UnifiedDiff.prototype.exitDocument \u003D function () {\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  $(this.pane_).unbind(\u0026#39\u003Baperture\u002Dlined\u002Dpane/scroll\u0026#39\u003B)\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  $([this.fromNumbers_.$elem_, this.unifiedLines_.$elem_])\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022    .undelegate(\u0026#39\u003Bclick.skipped\u0026#39\u003B)\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  this.fromNumbers_.exitDocument()\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  this.unifiedLines_.exitDocument()\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  this.pane_.exitDocument()\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022}\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022UnifiedDiff.prototype.showVisibleLines_ \u003D function (e, lineNum, x, y) {\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  var range \u003D this.pane_.visibleRange()\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  if (range) {\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022    this.udiff_.ensureVisible(new Hunk(range, range))\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  }\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022}\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022\u0022, \u0022gutters\u0022: []}, {\u0022end\u0022: true, \u0022start\u0022: true, \u0022html\u0022: \u0022UnifiedDiff.prototype.expandSkipped_ \u003D function (e) {\u0022, \u0022gutters\u0022: [], \u0022change\u0022: true}, {\u0022html\u0022: \u0022  // TODO Replace .closest() with $(e.delegateTarget) in jQuery 1.7.\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  var $skipped \u003D $(e.target).closest(\u0026#39\u003B.skipped\u0026#39\u003B)\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  $(this).trigger(\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022    \u0026#39\u003Bdiffract\u002Dskipped/click\u0026#39\u003B, [$skipped, $skipped.data(\u0026#39\u003Bskipped\u002Dindex\u0026#39\u003B)]\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  )\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022}\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022\u0022, \u0022gutters\u0022: []}, {\u0022addition\u0022: true, \u0022start\u0022: true, \u0022html\u0022: \u0022UnifiedDiff.prototype.contextFile_ \u003D function () {\u0022, \u0022gutters\u0022: []}, {\u0022addition\u0022: true, \u0022html\u0022: \u0022  return this.udiff_.to\u003B\u0022, \u0022gutters\u0022: []}, {\u0022addition\u0022: true, \u0022html\u0022: \u0022}\u003B\u0022, \u0022gutters\u0022: []}, {\u0022addition\u0022: true, \u0022html\u0022: \u0022\u0022, \u0022gutters\u0022: []}, {\u0022addition\u0022: true, \u0022html\u0022: \u0022UnifiedDiff.prototype.unifiedFile_ \u003D function () {\u0022, \u0022gutters\u0022: []}, {\u0022addition\u0022: true, \u0022html\u0022: \u0022  return this.contextFile_().file_.file_\u003B\u0022, \u0022gutters\u0022: []}, {\u0022addition\u0022: true, \u0022html\u0022: \u0022}\u003B\u0022, \u0022gutters\u0022: []}, {\u0022addition\u0022: true, \u0022html\u0022: \u0022\u0022, \u0022gutters\u0022: []}, {\u0022addition\u0022: true, \u0022html\u0022: \u0022/**\u0022, \u0022gutters\u0022: []}, {\u0022addition\u0022: true, \u0022html\u0022: \u0022 * Scroll to the from line number if it is visible and return true, else\u0022, \u0022gutters\u0022: []}, {\u0022addition\u0022: true, \u0022html\u0022: \u0022 * returns false.\u0022, \u0022gutters\u0022: []}, {\u0022addition\u0022: true, \u0022html\u0022: \u0022 */\u0022, \u0022gutters\u0022: []}, {\u0022addition\u0022: true, \u0022html\u0022: \u0022UnifiedDiff.prototype.scrollToFromLine \u003D function (lineNum) {\u0022, \u0022gutters\u0022: []}, {\u0022addition\u0022: true, \u0022html\u0022: \u0022  var unifiedLineNum \u003D this.unifiedFile_().from2unified_[lineNum]\u003B\u0022, \u0022gutters\u0022: []}, {\u0022addition\u0022: true, \u0022html\u0022: \u0022  return this.scrollToUnifiedLine(unifiedLineNum)\u003B\u0022, \u0022gutters\u0022: []}, {\u0022addition\u0022: true, \u0022html\u0022: \u0022}\u003B\u0022, \u0022gutters\u0022: []}, {\u0022addition\u0022: true, \u0022html\u0022: \u0022\u0022, \u0022gutters\u0022: []}, {\u0022addition\u0022: true, \u0022html\u0022: \u0022/**\u0022, \u0022gutters\u0022: []}, {\u0022addition\u0022: true, \u0022html\u0022: \u0022 * Scroll to the to line number if it is visible and return true, else\u0022, \u0022gutters\u0022: []}, {\u0022addition\u0022: true, \u0022html\u0022: \u0022 * returns false.\u0022, \u0022gutters\u0022: []}, {\u0022addition\u0022: true, \u0022html\u0022: \u0022 */\u0022, \u0022gutters\u0022: []}]\u000A  \u000A    \u003E\u000A  \u000A\u000A  [{\u0022addition\u0022: true, \u0022html\u0022: \u0022UnifiedDiff.prototype.scrollToToLine \u003D function (lineNum) {\u0022, \u0022gutters\u0022: []}, {\u0022addition\u0022: true, \u0022html\u0022: \u0022  var unifiedLineNum \u003D this.unifiedFile_().to2unified_[lineNum]\u003B\u0022, \u0022gutters\u0022: []}, {\u0022addition\u0022: true, \u0022html\u0022: \u0022  return this.scrollToUnifiedLine(unifiedLineNum)\u003B\u0022, \u0022gutters\u0022: []}, {\u0022addition\u0022: true, \u0022html\u0022: \u0022}\u003B\u0022, \u0022gutters\u0022: []}, {\u0022addition\u0022: true, \u0022html\u0022: \u0022\u0022, \u0022gutters\u0022: []}, {\u0022addition\u0022: true, \u0022html\u0022: \u0022UnifiedDiff.prototype.scrollToUnifiedLine \u003D function (lineNum) {\u0022, \u0022gutters\u0022: []}, {\u0022addition\u0022: true, \u0022html\u0022: \u0022  var contextFile \u003D this.contextFile_()\u003B\u0022, \u0022gutters\u0022: []}, {\u0022addition\u0022: true, \u0022html\u0022: \u0022  var paneLineNum \u003D contextFile.file2viewport[lineNum]\u003B\u0022, \u0022gutters\u0022: []}, {\u0022addition\u0022: true, \u0022html\u0022: \u0022  var fileLineNum \u003D contextFile.viewport2file[paneLineNum]\u003B\u0022, \u0022gutters\u0022: []}, {\u0022addition\u0022: true, \u0022html\u0022: \u0022  if (typeof fileLineNum \u003D\u003D\u003D \u0026#39\u003Bnumber\u0026#39\u003B) {\u0022, \u0022gutters\u0022: []}, {\u0022addition\u0022: true, \u0022html\u0022: \u0022    paneLineNum \u003D Math.max(1, paneLineNum \u002D this.focusOffset)\u003B\u0022, \u0022gutters\u0022: []}, {\u0022addition\u0022: true, \u0022html\u0022: \u0022    this.pane_.scrollToLine(paneLineNum, 0, 0)\u003B\u0022, \u0022gutters\u0022: []}, {\u0022addition\u0022: true, \u0022html\u0022: \u0022    return true\u003B\u0022, \u0022gutters\u0022: []}, {\u0022addition\u0022: true, \u0022html\u0022: \u0022  } else {\u0022, \u0022gutters\u0022: []}, {\u0022addition\u0022: true, \u0022html\u0022: \u0022    // lineNum is hidden in a skipped section.\u0022, \u0022gutters\u0022: []}, {\u0022addition\u0022: true, \u0022html\u0022: \u0022    return false\u003B\u0022, \u0022gutters\u0022: []}, {\u0022addition\u0022: true, \u0022html\u0022: \u0022  }\u0022, \u0022gutters\u0022: []}, {\u0022addition\u0022: true, \u0022html\u0022: \u0022}\u003B\u0022, \u0022gutters\u0022: []}, {\u0022addition\u0022: true, \u0022end\u0022: true, \u0022html\u0022: \u0022\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022var SideBySideDiff \u003D diffract.SideBySideDiff \u003D function (sbsdiff, lineHeight) {\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  this.sbsdiff_ \u003D sbsdiff\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  this.lineHeight \u003D lineHeight\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  this.focusOffset \u003D 5\u003B\u0022, \u0022gutters\u0022: []}, {\u0022addition\u0022: true, \u0022start\u0022: true, \u0022html\u0022: \u0022  this.width_ \u003D null\u003B\u0022, \u0022gutters\u0022: []}, {\u0022addition\u0022: true, \u0022end\u0022: true, \u0022html\u0022: \u0022  this.height_ \u003D null\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022\u0022, \u0022gutters\u0022: []}, {\u0022end\u0022: true, \u0022start\u0022: true, \u0022html\u0022: \u0022  this.fromHunkMap_ \u003D new HunkMap(this.sbsdiff_.hunks, \u0026#39\u003Bfrom\u0026#39\u003B, this.sbsdiff_.from.numLines, lineHeight)\u003B\u0022, \u0022gutters\u0022: [], \u0022change\u0022: true}, {\u0022html\u0022: \u0022  this.fromFile_ \u003D new ScrollableFilePane(this.sbsdiff_.from, lineHeight)\u003B\u0022, \u0022gutters\u0022: []}, {\u0022end\u0022: true, \u0022start\u0022: true, \u0022html\u0022: \u0022  this.segments_ \u003D new SegmentPane(sbsdiff, lineHeight)\u003B\u0022, \u0022gutters\u0022: [], \u0022change\u0022: true}, {\u0022html\u0022: \u0022  this.toFile_ \u003D new ScrollableFilePane(this.sbsdiff_.to, lineHeight)\u003B\u0022, \u0022gutters\u0022: []}, {\u0022end\u0022: true, \u0022start\u0022: true, \u0022html\u0022: \u0022  this.toHunkMap_ \u003D new HunkMap(this.sbsdiff_.hunks, \u0026#39\u003Bto\u0026#39\u003B, this.sbsdiff_.to.numLines, lineHeight)\u003B\u0022, \u0022gutters\u0022: [], \u0022change\u0022: true}, {\u0022html\u0022: \u0022\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  this.$elem_ \u003D null\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022}\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022SideBySideDiff.prototype.createDom \u003D function () {\u0022, \u0022gutters\u0022: []}, {\u0022start\u0022: true, \u0022html\u0022: \u0022  this.$elem_ \u003D $(\u0026#39\u003B\u0026lt\u003Bdiv class\u003D\u0026quot\u003Bdiffract diffract\u002Dsbsdiff\u0026quot\u003B\u0026gt\u003B\u0026#39\u003B)\u003B\u0022, \u0022gutters\u0022: [], \u0022change\u0022: true}, {\u0022html\u0022: \u0022  if (this.height_ !\u003D\u003D null) {\u0022, \u0022gutters\u0022: [], \u0022change\u0022: true}, {\u0022html\u0022: \u0022    this.setHeight(this.height_)\u003B\u0022, \u0022gutters\u0022: [], \u0022change\u0022: true}, {\u0022end\u0022: true, \u0022html\u0022: \u0022  }\u0022, \u0022gutters\u0022: [], \u0022change\u0022: true}, {\u0022html\u0022: \u0022}\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022SideBySideDiff.prototype.render \u003D function ($parent) {\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  this.createDom()\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  $parent.append(this.$elem_)\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  this.fromHunkMap_.render(this.$elem_)\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  this.fromFile_.render(this.$elem_)\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  this.segments_.render(this.$elem_)\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  this.toFile_.render(this.$elem_)\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  this.toHunkMap_.render(this.$elem_)\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022\u0022, \u0022gutters\u0022: []}, {\u0022end\u0022: true, \u0022start\u0022: true, \u0022html\u0022: \u0022  this.setWidth(this.width_)\u003B\u0022, \u0022gutters\u0022: [], \u0022change\u0022: true}, {\u0022html\u0022: \u0022\u0022, \u0022gutters\u0022: []}, {\u0022addition\u0022: true, \u0022start\u0022: true, \u0022html\u0022: \u0022  this.enterDocument()\u003B\u0022, \u0022gutters\u0022: []}, {\u0022addition\u0022: true, \u0022html\u0022: \u0022}\u003B\u0022, \u0022gutters\u0022: []}, {\u0022addition\u0022: true, \u0022html\u0022: \u0022\u0022, \u0022gutters\u0022: []}, {\u0022addition\u0022: true, \u0022html\u0022: \u0022SideBySideDiff.prototype.setWidth \u003D function (width) {\u0022, \u0022gutters\u0022: []}, {\u0022addition\u0022: true, \u0022html\u0022: \u0022  this.width_ \u003D width\u003B\u0022, \u0022gutters\u0022: []}, {\u0022addition\u0022: true, \u0022html\u0022: \u0022  if (this.$elem_) {\u0022, \u0022gutters\u0022: []}, {\u0022addition\u0022: true, \u0022html\u0022: \u0022    var segmentWidth \u003D 30\u003B\u0022, \u0022gutters\u0022: []}, {\u0022addition\u0022: true, \u0022html\u0022: \u0022    var hunkMapsWidth \u003D 18\u003B\u0022, \u0022gutters\u0022: []}, {\u0022addition\u0022: true, \u0022html\u0022: \u0022    var availableWidth \u003D (width \u002D segmentWidth \u002D hunkMapsWidth)\u003B\u0022, \u0022gutters\u0022: []}, {\u0022addition\u0022: true, \u0022html\u0022: \u0022\u0022, \u0022gutters\u0022: []}, {\u0022addition\u0022: true, \u0022html\u0022: \u0022    this.fromFile_.setPaneWidth(Math.floor(availableWidth / 2) \u002D 1)\u003B\u0022, \u0022gutters\u0022: []}, {\u0022addition\u0022: true, \u0022html\u0022: \u0022    this.segments_.setPaneWidth(segmentWidth)\u003B\u0022, \u0022gutters\u0022: []}, {\u0022addition\u0022: true, \u0022html\u0022: \u0022    this.toFile_.setPaneWidth(Math.ceil(availableWidth / 2) \u002D 1)\u003B\u0022, \u0022gutters\u0022: []}, {\u0022addition\u0022: true, \u0022html\u0022: \u0022    if (this.$elem_.parent().length \u003D\u003D\u003D 1) {\u0022, \u0022gutters\u0022: []}, {\u0022addition\u0022: true, \u0022html\u0022: \u0022      this.scrollbars()\u003B\u0022, \u0022gutters\u0022: []}, {\u0022addition\u0022: true, \u0022html\u0022: \u0022    }\u0022, \u0022gutters\u0022: []}, {\u0022addition\u0022: true, \u0022html\u0022: \u0022  }\u0022, \u0022gutters\u0022: []}, {\u0022addition\u0022: true, \u0022html\u0022: \u0022}\u003B\u0022, \u0022gutters\u0022: []}, {\u0022addition\u0022: true, \u0022html\u0022: \u0022\u0022, \u0022gutters\u0022: []}, {\u0022addition\u0022: true, \u0022html\u0022: \u0022SideBySideDiff.prototype.setHeight \u003D function (height) {\u0022, \u0022gutters\u0022: []}, {\u0022addition\u0022: true, \u0022html\u0022: \u0022  this.height_ \u003D height\u003B\u0022, \u0022gutters\u0022: []}, {\u0022addition\u0022: true, \u0022html\u0022: \u0022  if (this.$elem_) {\u0022, \u0022gutters\u0022: []}, {\u0022addition\u0022: true, \u0022html\u0022: \u0022    this.$elem_.height(height)\u003B\u0022, \u0022gutters\u0022: []}, {\u0022addition\u0022: true, \u0022html\u0022: \u0022    if (this.$elem_.parent().length \u003D\u003D\u003D 1) {\u0022, \u0022gutters\u0022: []}, {\u0022addition\u0022: true, \u0022html\u0022: \u0022      this.scrollbars()\u003B\u0022, \u0022gutters\u0022: []}, {\u0022addition\u0022: true, \u0022html\u0022: \u0022    }\u0022, \u0022gutters\u0022: []}, {\u0022addition\u0022: true, \u0022html\u0022: \u0022  }\u0022, \u0022gutters\u0022: []}, {\u0022addition\u0022: true, \u0022html\u0022: \u0022}\u003B\u0022, \u0022gutters\u0022: []}, {\u0022addition\u0022: true, \u0022html\u0022: \u0022\u0022, \u0022gutters\u0022: []}, {\u0022addition\u0022: true, \u0022end\u0022: true, \u0022html\u0022: \u0022SideBySideDiff.prototype.scrollbars \u003D function () {\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  this.fromHunkMap_.scrollbars(this.fromFile_.scrollx(), this.fromFile_.scrolly())\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  this.toHunkMap_.scrollbars(this.toFile_.scrollx(), this.toFile_.scrolly())\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022\u0022, \u0022gutters\u0022: []}, {\u0022start\u0022: true, \u0022html\u0022: \u0022  // Don\u0026#39\u003Bt show checkboard backgrounds unless we have scrollbars.\u0022, \u0022gutters\u0022: [], \u0022change\u0022: true}, {\u0022html\u0022: \u0022  this.fromFile_.$elem_\u0022, \u0022gutters\u0022: [], \u0022change\u0022: true}, {\u0022html\u0022: \u0022    .toggleClass(\u0026#39\u003Ball\u002Dlines\u002Dvisible\u0026#39\u003B, !this.fromFile_.scrolly())\u003B\u0022, \u0022gutters\u0022: [], \u0022change\u0022: true}, {\u0022html\u0022: \u0022  this.toFile_.$elem_\u0022, \u0022gutters\u0022: [], \u0022change\u0022: true}, {\u0022end\u0022: true, \u0022html\u0022: \u0022    .toggleClass(\u0026#39\u003Ball\u002Dlines\u002Dvisible\u0026#39\u003B, !this.toFile_.scrolly())\u003B\u0022, \u0022gutters\u0022: [], \u0022change\u0022: true}, {\u0022html\u0022: \u0022}\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022SideBySideDiff.prototype.enterDocument \u003D function () {\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  $([this.fromFile_, this.toFile_])\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022    .bind(\u0026#39\u003Bscrollable\u002Dfile\u002Dpane/scroll\u0026#39\u003B, $.proxy(this.onScroll_, this))\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  $([this.fromHunkMap_, this.toHunkMap_])\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022    .bind(\u0026#39\u003Bhunk\u002Dmap/click\u0026#39\u003B, $.proxy(this.onHunkMapClick_, this))\u003B\u0022, \u0022gutters\u0022: []}]\u000A  \u000A    \u003E\u000A  \u000A\u000A  [{\u0022html\u0022: \u0022}\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022SideBySideDiff.prototype.exitDocument \u003D function () {\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  $([this.fromFile_, this.toFile_])\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022    .unbind(\u0026#39\u003Bscrollable\u002Dfile\u002Dpane/scroll\u0026#39\u003B)\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  $([this.fromHunkMap_, this.toHunkMap_])\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022    .unbind(\u0026#39\u003Bhunk\u002Dmap/click\u0026#39\u003B)\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  this.fromHunkMap_.exitDocument()\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  this.fromFile_.exitDocument()\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  this.segments_.exitDocument()\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  this.toFile_.exitDocument()\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  this.toHunkMap_.exitDocument()\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022}\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022SideBySideDiff.prototype.onScroll_ \u003D function (e, lineNum, x, y) {\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  var scrolled \u003D e.target\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  var other \u003D scrolled \u003D\u003D\u003D this.fromFile_ ? this.toFile_ : this.fromFile_\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  var otherLine \u003D scrolled.file_.position\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  var focusedLineNum \u003D Math.min(lineNum + this.focusOffset, scrolled.numLines)\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  var otherFocusedLineNum \u003D otherLine[focusedLineNum]\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  var pivoting \u003D otherLine[focusedLineNum \u002D 1] \u003D\u003D\u003D otherFocusedLineNum\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  var othery \u003D pivoting ? this.lineHeight : y\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  var otherLineNum \u003D Math.max(\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022    pivoting ? 0 : 1,  // when pivoting othery is the equivalent of one line\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022    otherFocusedLineNum \u002D this.focusOffset\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  )\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  var tuple \u003D other.scrollToLine(otherLineNum, x, othery)\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  otherLineNum \u003D tuple[0]\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  othery \u003D tuple[2]\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  var viewport \u003D new Hunk(\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022    this.fromFile_.visibleRange(),\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022    this.toFile_.visibleRange()\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  )\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  this.sbsdiff_.ensureVisible(viewport)\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  var isFrom \u003D scrolled \u003D\u003D\u003D this.fromFile_\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  this.segments_.draw(\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022    viewport.overlapping(this.sbsdiff_.hunks),\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022    isFrom ? lineNum : otherLineNum,\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022    isFrom ? y : othery,\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022    isFrom ? otherLineNum : lineNum,\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022    isFrom ? othery : y\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022 )\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022}\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022SideBySideDiff.prototype.onHunkMapClick_ \u003D function (e, lineNum) {\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  var file \u003D e.target \u003D\u003D\u003D this.fromHunkMap_ ? this.fromFile_ : this.toFile_\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  file.scrollToLineAndFire(lineNum \u002D this.focusOffset, 0, 0)\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022}\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022\u0022, \u0022gutters\u0022: []}, {\u0022addition\u0022: true, \u0022start\u0022: true, \u0022html\u0022: \u0022SideBySideDiff.prototype.scrollToFirstHunk \u003D function () {\u0022, \u0022gutters\u0022: []}, {\u0022addition\u0022: true, \u0022html\u0022: \u0022  var hunk \u003D this.sbsdiff_.hunks[0]\u003B\u0022, \u0022gutters\u0022: []}, {\u0022addition\u0022: true, \u0022html\u0022: \u0022  if (hunk.isAddition()) {\u0022, \u0022gutters\u0022: []}, {\u0022addition\u0022: true, \u0022html\u0022: \u0022    this.toFile_.scrollToLineAndFire(hunk.toRange.low \u002D this.focusOffset, 0, 0)\u003B\u0022, \u0022gutters\u0022: []}, {\u0022addition\u0022: true, \u0022html\u0022: \u0022  } else {\u0022, \u0022gutters\u0022: []}, {\u0022addition\u0022: true, \u0022html\u0022: \u0022    this.fromFile_.scrollToLineAndFire(hunk.fromRange.low \u002D this.focusOffset, 0, 0)\u003B\u0022, \u0022gutters\u0022: []}, {\u0022addition\u0022: true, \u0022html\u0022: \u0022  }\u0022, \u0022gutters\u0022: []}, {\u0022addition\u0022: true, \u0022html\u0022: \u0022}\u003B\u0022, \u0022gutters\u0022: []}, {\u0022addition\u0022: true, \u0022end\u0022: true, \u0022html\u0022: \u0022\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022var FileNumbers \u003D diffract.FileNumbers \u003D function (file, lineHeight) {\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  this.file_ \u003D file\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  this.lineHeight \u003D lineHeight\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  this.$elem_ \u003D null\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022}\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022FileNumbers.prototype.createDom \u003D function () {\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  this.$elem_ \u003D $(\u0026#39\u003B\u0026lt\u003Bdiv class\u003D\u0026quot\u003Bfile\u002Dnumbers\u0026quot\u003B\u0026gt\u003B\u0026#39\u003B)\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  this.file_.lineHeightPx \u003D this.lineHeight\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  this.file_.numbersBoxDom \u003D this.$elem_[0]\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  // Don\u0026#39\u003Bt render file lines.\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  this.file_.scrollBoxDom \u003D $(\u0026#39\u003B\u0026lt\u003Bdiv\u0026gt\u003B\u0026#39\u003B)[0]\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022}\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022FileNumbers.prototype.render \u003D function ($parent) {\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  this.createDom()\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  $parent.append(this.$elem_)\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  this.enterDocument()\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022}\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022FileNumbers.prototype.enterDocument \u003D function () {}\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022FileNumbers.prototype.exitDocument \u003D function () {}\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022var ScrollableFilePane \u003D diffract.ScrollableFilePane \u003D function (file, lineHeight) {\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  this.file_ \u003D file\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  this.lineHeight \u003D lineHeight\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  this.numLines \u003D file.numLines\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022\u0022, \u0022gutters\u0022: []}, {\u0022start\u0022: true, \u0022html\u0022: \u0022  var numbersWidth \u003D 35\u003B\u0022, \u0022gutters\u0022: [], \u0022change\u0022: true}, {\u0022end\u0022: true, \u0022html\u0022: \u0022  this.numbers_ \u003D LinedPane.scrollable(file.numLines, numbersWidth, lineHeight)\u003B\u0022, \u0022gutters\u0022: [], \u0022change\u0022: true}, {\u0022html\u0022: \u0022  this.lines_ \u003D LinedPane.scrollable(\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022    file.numLines, this.file_.longestLineDom(), lineHeight\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  )\u003B\u0022, \u0022gutters\u0022: []}]\u000A  \u000A    \u003E\u000A  \u000A\u000A  [{\u0022html\u0022: \u0022\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  this.$elem_ \u003D null\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022}\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022ScrollableFilePane.prototype.createDom \u003D function () {\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  this.$elem_ \u003D $(\u0026#39\u003B\u0026lt\u003Bdiv class\u003D\u0026quot\u003Bscrollable\u002Dfile\u002Dpane\u0026quot\u003B\u0026gt\u003B\u0026#39\u003B)\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022}\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022ScrollableFilePane.prototype.render \u003D function ($parent) {\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  this.createDom()\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  $parent.append(this.$elem_)\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  this.numbers_.render(this.$elem_)\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  this.lines_.render(this.$elem_)\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  this.numbers_.$elem_.addClass(\u0026#39\u003Bscrollable\u002Dfile\u002Dpane\u002Dnumbers\u0026#39\u003B)\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  this.numbers_.$content().addClass(\u0026#39\u003Bfile\u002Dnumbers\u0026#39\u003B)\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  this.lines_.$elem_.addClass(\u0026#39\u003Bscrollable\u002Dfile\u002Dpane\u002Dlines\u0026#39\u003B)\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  this.lines_.$content().addClass(\u0026#39\u003Bfile\u002Dlines\u0026#39\u003B)\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  this.file_.lineHeightPx \u003D this.lineHeight\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  this.file_.numbersBoxDom \u003D this.numbers_.$content()[0]\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  this.file_.scrollBoxDom \u003D this.lines_.$content()[0]\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  this.enterDocument()\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022}\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022ScrollableFilePane.prototype.setPaneWidth \u003D function (paneWidth) {\u0022, \u0022gutters\u0022: []}, {\u0022start\u0022: true, \u0022html\u0022: \u0022  var numbersWidth \u003D 35\u003B\u0022, \u0022gutters\u0022: [], \u0022change\u0022: true}, {\u0022html\u0022: \u0022  this.numbers_.setPaneWidth(numbersWidth)\u003B\u0022, \u0022gutters\u0022: [], \u0022change\u0022: true}, {\u0022end\u0022: true, \u0022html\u0022: \u0022  this.lines_.setPaneWidth(paneWidth \u002D numbersWidth)\u003B\u0022, \u0022gutters\u0022: [], \u0022change\u0022: true}, {\u0022html\u0022: \u0022}\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022ScrollableFilePane.prototype.scrollx \u003D function () {\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  return this.lines_.scrollx()\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022}\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022ScrollableFilePane.prototype.scrolly \u003D function () {\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  return this.lines_.scrolly()\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022}\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022ScrollableFilePane.prototype.enterDocument \u003D function () {\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  $(this.lines_)\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022    .bind(\u0026#39\u003Baperture\u002Dlined\u002Dpane/scroll\u0026#39\u003B, $.proxy(this.onScroll_, this))\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022}\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022ScrollableFilePane.prototype.exitDocument \u003D function () {\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  $(this.lines_).unbind(\u0026#39\u003Baperture\u002Dlined\u002Dpane/scroll\u0026#39\u003B)\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  this.numbers_.exitDocument()\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  this.lines_.exitDocument()\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022}\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022ScrollableFilePane.prototype.onScroll_ \u003D function (e, lineNum, x, y) {\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  this.numbers_.scrollToLine(lineNum, x, y)\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  $(this).trigger(\u0026#39\u003Bscrollable\u002Dfile\u002Dpane/scroll\u0026#39\u003B, [lineNum, x, y])\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022}\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022ScrollableFilePane.prototype.scrollToLine \u003D function (lineNum, x, y) {\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  var tuple \u003D this.lines_.scrollToLine(lineNum, x, y)\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  this.numbers_.scrollToLine(tuple[0], tuple[1], tuple[2])\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  return tuple\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022}\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022ScrollableFilePane.prototype.scrollToLineAndFire \u003D function (lineNum, x, y) {\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  var tuple \u003D this.scrollToLine(lineNum, x, y)\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  $(this).trigger(\u0026#39\u003Bscrollable\u002Dfile\u002Dpane/scroll\u0026#39\u003B, tuple)\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022}\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022ScrollableFilePane.prototype.visibleRange \u003D function () {\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  return this.lines_.visibleRange()\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022}\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022\u0022, \u0022gutters\u0022: []}, {\u0022start\u0022: true, \u0022html\u0022: \u0022var SegmentPane \u003D window.SegmentPane \u003D function (sbsdiff, lineHeight) {\u0022, \u0022gutters\u0022: [], \u0022change\u0022: true}, {\u0022end\u0022: true, \u0022html\u0022: \u0022  this.sbsdiff \u003D sbsdiff\u003B\u0022, \u0022gutters\u0022: [], \u0022change\u0022: true}, {\u0022html\u0022: \u0022  this.lineHeight \u003D lineHeight\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  this.width \u003D null\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  this.$elem_ \u003D null\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  this.canvas_ \u003D null\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  this.visiblePaths_ \u003D []\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022}\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022SegmentPane.prototype.createDom \u003D function () {\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  this.$elem_ \u003D $(\u0026#39\u003B\u0026lt\u003Bdiv class\u003D\u0026quot\u003Bsegment\u002Dpane\u0026quot\u003B\u0026gt\u003B\u0026#39\u003B)\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  this.canvas_ \u003D new Raphael(this.$elem_[0])\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  if (this.width !\u003D\u003D null) {\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022    this.setPaneWidth(this.width)\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  }\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022}\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022SegmentPane.prototype.render \u003D function ($parent) {\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  this.createDom()\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  $parent.append(this.$elem_)\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  this.enterDocument()\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022}\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022SegmentPane.prototype.enterDocument \u003D function () {}\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022SegmentPane.prototype.exitDocument \u003D function () {}\u003B\u0022, \u0022gutters\u0022: []}]\u000A  \u000A    \u003E\u000A  \u000A\u000A  [{\u0022html\u0022: \u0022\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022SegmentPane.prototype.setPaneWidth \u003D function (width) {\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  this.width \u003D width\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  if (this.$elem_ !\u003D\u003D null) {\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022    this.$elem_.width(width)\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022    this.canvas_.setSize(width, this.$elem_.height())\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  }\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022}\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022SegmentPane.STROKE \u003D \u0026#39\u003B#ccc\u0026#39\u003B\u003B\u0022, \u0022gutters\u0022: []}, {\u0022start\u0022: true, \u0022html\u0022: \u0022SegmentPane.prototype.add_ \u003D { stroke: \u0026#39\u003B#ccffcc\u0026#39\u003B, fill: \u0026#39\u003B#ccffcc\u0026#39\u003B }\u003B\u0022, \u0022gutters\u0022: [], \u0022change\u0022: true}, {\u0022html\u0022: \u0022SegmentPane.prototype.del_ \u003D { stroke: \u0026#39\u003B#ffdddd\u0026#39\u003B, fill: \u0026#39\u003B#ffdddd\u0026#39\u003B }\u003B\u0022, \u0022gutters\u0022: [], \u0022change\u0022: true}, {\u0022end\u0022: true, \u0022html\u0022: \u0022SegmentPane.prototype.mod_ \u003D { stroke: \u0026#39\u003B#f4f4f4\u0026#39\u003B, fill: \u0026#39\u003B#f4f4f4\u0026#39\u003B }\u003B\u0022, \u0022gutters\u0022: [], \u0022change\u0022: true}, {\u0022html\u0022: \u0022SegmentPane.prototype.con_ \u003D { stroke: \u0026#39\u003B#ffffe0\u0026#39\u003B, fill: \u0026#39\u003B#ffffe0\u0026#39\u003B }\u003B\u0022, \u0022gutters\u0022: []}, {\u0022addition\u0022: true, \u0022start\u0022: true, \u0022end\u0022: true, \u0022html\u0022: \u0022SegmentPane.prototype.border_ \u003D { stroke: \u0026#39\u003B#ccc\u0026#39\u003B, fill: \u0026#39\u003B#ccc\u0026#39\u003B }\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022SegmentPane.prototype.createPath_ \u003D function (hunk) {\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  var path \u003D this.canvas_.path()\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  if (hunk.isConflict()) {\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022      path.attr(this.con_)\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  } else if (hunk.isAddition()) {\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022      path.attr(this.add_)\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  } else if (hunk.isChange()) {\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022      path.attr(this.mod_)\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  } else if (hunk.isDeletion()) {\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022      path.attr(this.del_)\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  }\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  return path\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022}\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022\u0022, \u0022gutters\u0022: []}, {\u0022addition\u0022: true, \u0022start\u0022: true, \u0022html\u0022: \u0022SegmentPane.prototype.createBorder_ \u003D function () {\u0022, \u0022gutters\u0022: []}, {\u0022addition\u0022: true, \u0022html\u0022: \u0022  var path \u003D this.canvas_.path()\u003B\u0022, \u0022gutters\u0022: []}, {\u0022addition\u0022: true, \u0022html\u0022: \u0022  path.attr(this.border_)\u003B\u0022, \u0022gutters\u0022: []}, {\u0022addition\u0022: true, \u0022html\u0022: \u0022  return path\u003B\u0022, \u0022gutters\u0022: []}, {\u0022addition\u0022: true, \u0022html\u0022: \u0022}\u003B\u0022, \u0022gutters\u0022: []}, {\u0022addition\u0022: true, \u0022end\u0022: true, \u0022html\u0022: \u0022\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022SegmentPane.prototype.lineTopPx \u003D function (lineNum) {\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  return (lineNum \u002D 1) * this.lineHeight\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022}\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022SegmentPane.prototype.lineBottomPx \u003D function (lineNum) {\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  return lineNum * this.lineHeight\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022}\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022SegmentPane.prototype.draw \u003D function (hunks, fromLine, fromy, toLine, toy) {\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  var i, len\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  for (i \u003D 0, len \u003D this.visiblePaths_.length\u003B i \u0026lt\u003B len\u003B i++) {\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022    this.visiblePaths_[i].hide()\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  }\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  this.visiblePaths_ \u003D []\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  for (i \u003D 0, len \u003D hunks.length\u003B i \u0026lt\u003B len\u003B i++) {\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022    var hunk \u003D hunks[i],\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022        fromRange \u003D hunk.fromRange,\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022        toRange \u003D hunk.toRange,\u0022, \u0022gutters\u0022: []}, {\u0022end\u0022: true, \u0022start\u0022: true, \u0022html\u0022: \u0022        width \u003D this.width\u003B\u0022, \u0022gutters\u0022: [], \u0022change\u0022: true}, {\u0022html\u0022: \u0022\u0022, \u0022gutters\u0022: []}, {\u0022start\u0022: true, \u0022html\u0022: \u0022    // Draw the segments (without borders).\u0022, \u0022gutters\u0022: [], \u0022change\u0022: true}, {\u0022end\u0022: true, \u0022html\u0022: \u0022    var path \u003D hunk.path || (hunk.path \u003D this.createPath_(hunk))\u003B\u0022, \u0022gutters\u0022: [], \u0022change\u0022: true}, {\u0022html\u0022: \u0022    if (hunk.isAddition()) {\u0022, \u0022gutters\u0022: []}, {\u0022start\u0022: true, \u0022html\u0022: \u0022      path.attr(\u0026#39\u003Bpath\u0026#39\u003B, [\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022        [\u0026#39\u003BM\u0026#39\u003B, 0, this.lineBottomPx(fromRange.low \u002D fromLine + 1) \u002D fromy + 1],\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022        [\u0026#39\u003BL\u0026#39\u003B, width, this.lineTopPx(toRange.low \u002D toLine + 1) \u002D toy + 1],\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022        [\u0026#39\u003BV\u0026#39\u003B, this.lineBottomPx(toRange.high \u002D toLine + 1) \u002D toy],\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022        [\u0026#39\u003BZ\u0026#39\u003B]\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022      ])\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022    } else if (hunk.isChange()) {\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022      path.attr(\u0026#39\u003Bpath\u0026#39\u003B, [\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022        [\u0026#39\u003BM\u0026#39\u003B, 0, this.lineTopPx(fromRange.low \u002D fromLine + 1) \u002D fromy + 1],\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022        [\u0026#39\u003BL\u0026#39\u003B, width, this.lineTopPx(toRange.low \u002D toLine + 1) \u002D toy + 1],\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022        [\u0026#39\u003BV\u0026#39\u003B, this.lineBottomPx(toRange.high \u002D toLine + 1) \u002D toy],\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022        [\u0026#39\u003BL\u0026#39\u003B, 0, this.lineBottomPx(fromRange.high \u002D fromLine + 1) \u002D fromy],\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022        [\u0026#39\u003BZ\u0026#39\u003B]\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022      ])\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022    } else if (hunk.isDeletion()) {\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022      path.attr(\u0026#39\u003Bpath\u0026#39\u003B, [\u0022, \u0022gutters\u0022: []}, {\u0022end\u0022: true, \u0022start\u0022: true, \u0022html\u0022: \u0022        [\u0026#39\u003BM\u0026#39\u003B, 0, this.lineTopPx(fromRange.low \u002D fromLine + 1) \u002D fromy + 1],\u0022, \u0022gutters\u0022: [], \u0022change\u0022: true}, {\u0022html\u0022: \u0022        [\u0026#39\u003BV\u0026#39\u003B, this.lineBottomPx(fromRange.high \u002D fromLine + 1) \u002D fromy],\u0022, \u0022gutters\u0022: []}, {\u0022end\u0022: true, \u0022start\u0022: true, \u0022html\u0022: \u0022        [\u0026#39\u003BL\u0026#39\u003B, width, this.lineBottomPx(toRange.low \u002D toLine + 1) \u002D toy + 1],\u0022, \u0022gutters\u0022: [], \u0022change\u0022: true}, {\u0022html\u0022: \u0022        [\u0026#39\u003BZ\u0026#39\u003B]\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022      ])\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022    }\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022    path.show()\u003B\u0022, \u0022gutters\u0022: []}, {\u0022addition\u0022: true, \u0022start\u0022: true, \u0022html\u0022: \u0022    this.visiblePaths_.push(path)\u003B\u0022, \u0022gutters\u0022: []}, {\u0022addition\u0022: true, \u0022html\u0022: \u0022\u0022, \u0022gutters\u0022: []}, {\u0022addition\u0022: true, \u0022html\u0022: \u0022    // Draw the top and bottom border for the path.\u0022, \u0022gutters\u0022: []}, {\u0022addition\u0022: true, \u0022html\u0022: \u0022    var border \u003D hunk.borderPath || this.createBorder_()\u003B\u0022, \u0022gutters\u0022: []}, {\u0022addition\u0022: true, \u0022html\u0022: \u0022    if (hunk.isAddition()) {\u0022, \u0022gutters\u0022: []}, {\u0022addition\u0022: true, \u0022html\u0022: \u0022\u0022, \u0022gutters\u0022: []}, {\u0022addition\u0022: true, \u0022html\u0022: \u0022      if (hunk.isConflict() \u0026amp\u003B\u0026amp\u003B typeof hunk.isConflictStart !\u003D\u003D \u0026#39\u003Bboolean\u0026#39\u003B) {\u0022, \u0022gutters\u0022: []}, {\u0022addition\u0022: true, \u0022html\u0022: \u0022        // TODO The Diff class should make these booleans available on hunks.\u0022, \u0022gutters\u0022: []}, {\u0022addition\u0022: true, \u0022html\u0022: \u0022        var prev \u003D this.sbsdiff.hunkBefore(hunk)\u003B\u0022, \u0022gutters\u0022: []}, {\u0022addition\u0022: true, \u0022html\u0022: \u0022        var next \u003D this.sbsdiff.hunkAfter(hunk)\u003B\u0022, \u0022gutters\u0022: []}, {\u0022addition\u0022: true, \u0022html\u0022: \u0022        hunk.isConflictStart \u003D next \u0026amp\u003B\u0026amp\u003B next.isConflict() \u0026amp\u003B\u0026amp\u003B next.isChange()\u003B\u0022, \u0022gutters\u0022: []}, {\u0022addition\u0022: true, \u0022html\u0022: \u0022        hunk.isEntireConflict \u003D\u0022, \u0022gutters\u0022: []}, {\u0022addition\u0022: true, \u0022html\u0022: \u0022          !(prev \u0026amp\u003B\u0026amp\u003B prev.isConflict() \u0026amp\u003B\u0026amp\u003B prev.isChange()) \u0026amp\u003B\u0026amp\u003B\u0022, \u0022gutters\u0022: []}, {\u0022addition\u0022: true, \u0022html\u0022: \u0022          !(next \u0026amp\u003B\u0026amp\u003B next.isConflict() \u0026amp\u003B\u0026amp\u003B next.isChange())\u003B\u0022, \u0022gutters\u0022: []}, {\u0022addition\u0022: true, \u0022html\u0022: \u0022      }\u0022, \u0022gutters\u0022: []}, {\u0022addition\u0022: true, \u0022html\u0022: \u0022\u0022, \u0022gutters\u0022: []}, {\u0022addition\u0022: true, \u0022html\u0022: \u0022      if (hunk.isConflict() \u0026amp\u003B\u0026amp\u003B !hunk.isEntireConflict) {\u0022, \u0022gutters\u0022: []}]\u000A  \u000A    \u003E\u000A  \u000A\u000A  [{\u0022addition\u0022: true, \u0022html\u0022: \u0022        if (hunk.isConflictStart) {\u0022, \u0022gutters\u0022: []}, {\u0022addition\u0022: true, \u0022html\u0022: \u0022          border.attr(\u0026#39\u003Bpath\u0026#39\u003B, [\u0022, \u0022gutters\u0022: []}, {\u0022addition\u0022: true, \u0022html\u0022: \u0022            [\u0026#39\u003BM\u0026#39\u003B, 0, this.lineBottomPx(fromRange.low \u002D fromLine + 1) \u002D fromy + 1],\u0022, \u0022gutters\u0022: []}, {\u0022addition\u0022: true, \u0022html\u0022: \u0022            [\u0026#39\u003BL\u0026#39\u003B, width, this.lineTopPx(toRange.low \u002D toLine + 1) \u002D toy]\u0022, \u0022gutters\u0022: []}, {\u0022addition\u0022: true, \u0022html\u0022: \u0022          ])\u003B\u0022, \u0022gutters\u0022: []}, {\u0022addition\u0022: true, \u0022html\u0022: \u0022        } else {\u0022, \u0022gutters\u0022: []}, {\u0022addition\u0022: true, \u0022html\u0022: \u0022          border.attr(\u0026#39\u003Bpath\u0026#39\u003B, [\u0022, \u0022gutters\u0022: []}, {\u0022addition\u0022: true, \u0022html\u0022: \u0022            [\u0026#39\u003BM\u0026#39\u003B, width, this.lineBottomPx(toRange.high \u002D toLine + 1) \u002D toy],\u0022, \u0022gutters\u0022: []}, {\u0022addition\u0022: true, \u0022html\u0022: \u0022            [\u0026#39\u003BL\u0026#39\u003B, 0, this.lineBottomPx(fromRange.low \u002D fromLine + 1) \u002D fromy + 1]\u0022, \u0022gutters\u0022: []}, {\u0022addition\u0022: true, \u0022html\u0022: \u0022          ])\u003B\u0022, \u0022gutters\u0022: []}, {\u0022addition\u0022: true, \u0022html\u0022: \u0022        }\u0022, \u0022gutters\u0022: []}, {\u0022addition\u0022: true, \u0022html\u0022: \u0022      } else {\u0022, \u0022gutters\u0022: []}, {\u0022addition\u0022: true, \u0022html\u0022: \u0022        // Normal addition hunks and conflict hunks that are only an addition.\u0022, \u0022gutters\u0022: []}, {\u0022addition\u0022: true, \u0022html\u0022: \u0022        border.attr(\u0026#39\u003Bpath\u0026#39\u003B, [\u0022, \u0022gutters\u0022: []}, {\u0022addition\u0022: true, \u0022html\u0022: \u0022          [\u0026#39\u003BM\u0026#39\u003B, 0, this.lineBottomPx(fromRange.low \u002D fromLine + 1) \u002D fromy + 1],\u0022, \u0022gutters\u0022: []}, {\u0022addition\u0022: true, \u0022html\u0022: \u0022          [\u0026#39\u003BL\u0026#39\u003B, width, this.lineTopPx(toRange.low \u002D toLine + 1) \u002D toy],\u0022, \u0022gutters\u0022: []}, {\u0022addition\u0022: true, \u0022html\u0022: \u0022          [\u0026#39\u003BM\u0026#39\u003B, width, this.lineBottomPx(toRange.high \u002D toLine + 1) \u002D toy],\u0022, \u0022gutters\u0022: []}, {\u0022addition\u0022: true, \u0022html\u0022: \u0022          [\u0026#39\u003BL\u0026#39\u003B, 0, this.lineBottomPx(fromRange.low \u002D fromLine + 1) \u002D fromy + 1]\u0022, \u0022gutters\u0022: []}, {\u0022addition\u0022: true, \u0022html\u0022: \u0022        ])\u003B\u0022, \u0022gutters\u0022: []}, {\u0022addition\u0022: true, \u0022html\u0022: \u0022      }\u0022, \u0022gutters\u0022: []}, {\u0022addition\u0022: true, \u0022html\u0022: \u0022\u0022, \u0022gutters\u0022: []}, {\u0022addition\u0022: true, \u0022html\u0022: \u0022    } else if (hunk.isChange() \u0026amp\u003B\u0026amp\u003B !hunk.isConflict()) {\u0022, \u0022gutters\u0022: []}, {\u0022addition\u0022: true, \u0022html\u0022: \u0022      border.attr(\u0026#39\u003Bpath\u0026#39\u003B, [\u0022, \u0022gutters\u0022: []}, {\u0022addition\u0022: true, \u0022html\u0022: \u0022        [\u0026#39\u003BM\u0026#39\u003B, 0, this.lineTopPx(fromRange.low \u002D fromLine + 1) \u002D fromy + 1],\u0022, \u0022gutters\u0022: []}, {\u0022addition\u0022: true, \u0022html\u0022: \u0022        [\u0026#39\u003BL\u0026#39\u003B, width, this.lineTopPx(toRange.low \u002D toLine + 1) \u002D toy + 1],\u0022, \u0022gutters\u0022: []}, {\u0022addition\u0022: true, \u0022html\u0022: \u0022        [\u0026#39\u003BM\u0026#39\u003B, width, this.lineBottomPx(toRange.high \u002D toLine + 1) \u002D toy],\u0022, \u0022gutters\u0022: []}, {\u0022addition\u0022: true, \u0022html\u0022: \u0022        [\u0026#39\u003BL\u0026#39\u003B, 0, this.lineBottomPx(fromRange.high \u002D fromLine + 1) \u002D fromy]\u0022, \u0022gutters\u0022: []}, {\u0022addition\u0022: true, \u0022html\u0022: \u0022      ])\u003B\u0022, \u0022gutters\u0022: []}, {\u0022addition\u0022: true, \u0022html\u0022: \u0022    } else if (hunk.isDeletion()) {\u0022, \u0022gutters\u0022: []}, {\u0022addition\u0022: true, \u0022html\u0022: \u0022      border.attr(\u0026#39\u003Bpath\u0026#39\u003B, [\u0022, \u0022gutters\u0022: []}, {\u0022addition\u0022: true, \u0022html\u0022: \u0022        [\u0026#39\u003BM\u0026#39\u003B, width, this.lineBottomPx(toRange.low \u002D toLine + 1) \u002D toy + 1],\u0022, \u0022gutters\u0022: []}, {\u0022addition\u0022: true, \u0022html\u0022: \u0022        [\u0026#39\u003BL\u0026#39\u003B, 0, this.lineTopPx(fromRange.low \u002D fromLine + 1) \u002D fromy],\u0022, \u0022gutters\u0022: []}, {\u0022addition\u0022: true, \u0022html\u0022: \u0022        [\u0026#39\u003BM\u0026#39\u003B, 0, this.lineBottomPx(fromRange.high \u002D fromLine + 1) \u002D fromy],\u0022, \u0022gutters\u0022: []}, {\u0022addition\u0022: true, \u0022html\u0022: \u0022        [\u0026#39\u003BL\u0026#39\u003B, width, this.lineBottomPx(toRange.low \u002D toLine + 1) \u002D toy + 1]\u0022, \u0022gutters\u0022: []}, {\u0022addition\u0022: true, \u0022html\u0022: \u0022      ])\u003B\u0022, \u0022gutters\u0022: []}, {\u0022addition\u0022: true, \u0022html\u0022: \u0022    }\u0022, \u0022gutters\u0022: []}, {\u0022addition\u0022: true, \u0022html\u0022: \u0022    border.show()\u003B\u0022, \u0022gutters\u0022: []}, {\u0022addition\u0022: true, \u0022end\u0022: true, \u0022html\u0022: \u0022    this.visiblePaths_.push(border)\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  }\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022}\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022\u0022, \u0022gutters\u0022: []}, {\u0022end\u0022: true, \u0022start\u0022: true, \u0022html\u0022: \u0022var HunkMap \u003D diffract.HunkMap \u003D function (hunks, side, numLines, lineHeight) {\u0022, \u0022gutters\u0022: [], \u0022change\u0022: true}, {\u0022html\u0022: \u0022  this.hunks \u003D _.filter(hunks, function (h) {\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022    if (side \u003D\u003D\u003D \u0026#39\u003Bfrom\u0026#39\u003B) {\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022      return h.isDeletion() || h.isChange()\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022    } else {\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022      return h.isAddition() || h.isChange()\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022    }\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  })\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  this.numLines \u003D numLines\u003B\u0022, \u0022gutters\u0022: []}, {\u0022addition\u0022: true, \u0022start\u0022: true, \u0022end\u0022: true, \u0022html\u0022: \u0022  this.lineHeight \u003D lineHeight\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  this.side \u003D side\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  this.$window_ \u003D null\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  this.$elem_ \u003D null\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022}\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022HunkMap.prototype.createDom \u003D function () {\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  this.$window_ \u003D $(window)\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  this.$elem_ \u003D $(\u0026#39\u003B\u0026lt\u003Bdiv class\u003D\u0026quot\u003Bhunk\u002Dmap\u0026quot\u003B\u0026gt\u003B\u0026#39\u003B)\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  var isFrom \u003D this.side \u003D\u003D\u003D \u0026#39\u003Bfrom\u0026#39\u003B\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  var tag \u003D isFrom ? \u0026#39\u003B\u0026lt\u003Bdel\u0026gt\u003B\u0026#39\u003B : \u0026#39\u003B\u0026lt\u003Bins\u0026gt\u003B\u0026#39\u003B\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  for (var i \u003D 0\u003B i \u0026lt\u003B this.hunks.length\u003B i++) {\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022    var hunk \u003D this.hunks[i]\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022    var range \u003D isFrom ? hunk.fromRange : hunk.toRange\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022    var $hunk \u003D $(tag)\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022      .toggleClass(\u0026#39\u003Bchange\u0026#39\u003B, hunk.isChange())\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022      .toggleClass(\u0026#39\u003Bconflict\u0026#39\u003B, hunk.isConflict())\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022      .css({\u0022, \u0022gutters\u0022: []}, {\u0022end\u0022: true, \u0022start\u0022: true, \u0022html\u0022: \u0022        top: this.percent(range.low \u002D 1) + \u0026#39\u003B%\u0026#39\u003B,\u0022, \u0022gutters\u0022: [], \u0022change\u0022: true}, {\u0022html\u0022: \u0022        height: this.percent(range.length) + \u0026#39\u003B%\u0026#39\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022      })\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022    this.$elem_.append($hunk)\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  }\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022}\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022HunkMap.prototype.percent \u003D function (n) {\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  return (n / this.numLines) * 100\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022}\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022HunkMap.prototype.render \u003D function ($parent) {\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  this.createDom()\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  $parent.append(this.$elem_)\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  this.enterDocument()\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022}\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022HunkMap.prototype.enterDocument \u003D function () {\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  // Be forgiving to small click targets, so bind on the entire element.\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  this.$elem_.bind(\u0026#39\u003Bclick.hunk\u002Dmap\u0026#39\u003B, $.proxy(this.onClick_, this))\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022}\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022HunkMap.prototype.exitDocument \u003D function () {\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  this.$elem_.unbind(\u0026#39\u003Bclick.hunk\u002Dmap\u0026#39\u003B)\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022}\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022HunkMap.prototype.onClick_ \u003D function (e) {\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  var y \u003D e.clientY \u002D (this.$elem_.offset().top \u002D this.$window_.scrollTop())\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  var lineNum \u003D Math.round((y / this.$elem_.height()) * this.numLines)\u003B\u0022, \u0022gutters\u0022: []}]\u000A  \u000A    \u003E\u000A  \u000A\u000A  [{\u0022html\u0022: \u0022  lineNum \u003D Math.min(Math.max(1, lineNum), this.numLines)\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  $(this).trigger(\u0026#39\u003Bhunk\u002Dmap/click\u0026#39\u003B, [lineNum])\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022}\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022HunkMap.prototype.scrollbars \u003D function (scrollx, scrolly) {\u0022, \u0022gutters\u0022: []}, {\u0022end\u0022: true, \u0022start\u0022: true, \u0022html\u0022: \u0022  var availableHeightPx \u003D this.$elem_.parent().height()\u003B\u0022, \u0022gutters\u0022: [], \u0022change\u0022: true}, {\u0022html\u0022: \u0022  var scrollbarPx \u003D $.getScrollbarWidth()\u003B\u0022, \u0022gutters\u0022: []}, {\u0022start\u0022: true, \u0022html\u0022: \u0022\u0022, \u0022gutters\u0022: [], \u0022change\u0022: true}, {\u0022html\u0022: \u0022  var marginTopPx \u003D (scrolly ? scrollbarPx : 0)\u003B\u0022, \u0022gutters\u0022: [], \u0022change\u0022: true}, {\u0022end\u0022: true, \u0022html\u0022: \u0022  var marginBottomPx \u003D marginTopPx + (scrollx ? scrollbarPx : 0)\u003B\u0022, \u0022gutters\u0022: [], \u0022change\u0022: true}, {\u0022html\u0022: \u0022\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022  this.$elem_.css({\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022    marginTop: marginTopPx,\u0022, \u0022gutters\u0022: []}, {\u0022start\u0022: true, \u0022html\u0022: \u0022    height: Math.min(\u0022, \u0022gutters\u0022: [], \u0022change\u0022: true}, {\u0022html\u0022: \u0022      this.numLines* this.lineHeight,\u0022, \u0022gutters\u0022: [], \u0022change\u0022: true}, {\u0022html\u0022: \u0022      availableHeightPx \u002D marginTopPx \u002D marginBottomPx\u0022, \u0022gutters\u0022: [], \u0022change\u0022: true}, {\u0022end\u0022: true, \u0022html\u0022: \u0022    )\u0022, \u0022gutters\u0022: [], \u0022change\u0022: true}, {\u0022html\u0022: \u0022  })\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022}\u003B\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022\u0022, \u0022gutters\u0022: []}, {\u0022html\u0022: \u0022})($, _, this)\u003B\u0022, \u0022gutters\u0022: []}]\u000A  \u000A\u000A\u000A\u003E\u000A\u000A\u000A  ({\u0022numLines\u0022: 622, \u0022position\u0022: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 37, 37, 37, 37, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 74, 75, 76, 77, 78, 79, 79, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 92, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 109, 110, 111, 112, 113, 113, 113, 113, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 174, 174, 174, 174, 174, 174, 174, 174, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 337, 337, 337, 337, 337, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 385, 385, 385, 385, 385, 385, 385, 385, 385, 385, 385, 385, 385, 385, 385, 385, 385, 385, 385, 385, 385, 385, 385, 385, 385, 385, 385, 385, 385, 385, 385, 385, 385, 385, 385, 385, 385, 385, 385, 385, 385, 385, 385, 385, 385, 385, 385, 385, 385, 385, 385, 385, 385, 385, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 460, 460, 460, 461, 462, 463, 464, 465], \u0022longestLine\u0022: {\u0022html\u0022: \u0022  this.fromHunkMap_ \u003D new HunkMap(this.sbsdiff_.hunks, \u0026#39\u003Bfrom\u0026#39\u003B, this.sbsdiff_.from.numLines, lineHeight)\u003B\u0022}, \u0022name\u0022: \u0022to\u0022, \u0022filename\u0022: \u0022media/js/lib/diffract.js\u0022})\u000A\u000A\u000A\u000A\u000A\u003C\u000A\u000A\u000A  [null, [1, 1], [2, 2], [3, 3], [4, 4], [5, 5], [6, 6], [7, 7], [8, 8], [9, 9], [10, 10], [11, 11], [12, 12], [13, 13], [null, 14], [14, 15], [15, null], [null, 16], [16, 17], [17, 18], [18, 19], [19, 20], [20, 21], [21, 22], [22, 23], [23, 24], [24, 25], [25, 26], [26, 27], [27, 28], [28, 29], [29, 30], [30, 31], [31, 32], [32, 33], [33, 34], [34, 35], [35, 36], [36, 37], [37, null], [null, 38], [null, 39], [null, 40], [null, 41], [null, 42], [null, 43], [38, 44], [39, null], [40, 45], [41, 46], [42, 47], [43, 48], [44, 49], [45, 50], [46, 51], [47, null], [null, 52], [48, 53], [49, 54], [50, 55], [51, 56], [52, 57], [53, 58], [54, 59], [55, 60], [56, 61], [57, 62], [58, 63], [59, 64], [60, 65], [61, 66], [62, 67], [63, 68], [64, 69], [65, 70], [66, 71], [67, null], [null, 72], [68, 73], [69, 74], [70, 75], [71, 76], [72, 77], [73, 78], [74, 79], [null, 80], [null, 81], [null, 82], [null, 83], [null, 84], [null, 85], [null, 86], [null, 87], [null, 88], [null, 89], [null, 90], [null, 91], [null, 92], [null, 93], [null, 94], [null, 95], [null, 96], [null, 97], [null, 98], [null, 99], [null, 100], [null, 101], [null, 102], [null, 103], [null, 104], [null, 105], [null, 106], [null, 107], [null, 108], [null, 109], [null, 110], [null, 111], [null, 112], [null, 113], [null, 114], [null, 115], [null, 116], [null, 117], [null, 118], [null, 119], [75, 120], [76, 121], [77, 122], [78, 123], [79, 124], [null, 125], [null, 126], [80, 127], [81, null], [null, 128], [82, 129], [83, null], [null, 130], [84, 131], [85, null], [null, 132], [86, 133], [87, 134], [88, 135], [89, 136], [90, 137], [91, null], [92, null], [null, 138], [null, 139], [null, 140], [null, 141], [93, 142], [94, 143], [95, 144], [96, 145], [97, 146], [98, 147], [99, 148], [100, 149], [101, 150], [102, 151], [103, 152], [104, 153], [105, null], [106, null], [107, null], [108, null], [null, 154], [109, 155], [null, 156], [null, 157], [null, 158], [null, 159], [null, 160], [null, 161], [null, 162], [null, 163], [null, 164], [null, 165], [null, 166], [null, 167], [null, 168], [null, 169], [null, 170], [null, 171], [null, 172], [null, 173], [null, 174], [null, 175], [null, 176], [null, 177], [null, 178], [null, 179], [null, 180], [null, 181], [null, 182], [null, 183], [null, 184], [null, 185], [110, 186], [111, 187], [112, 188], [113, null], [null, 189], [null, 190], [null, 191], [null, 192], [null, 193], [114, 194], [115, 195], [116, 196], [117, 197], [118, 198], [119, 199], [120, 200], [121, 201], [122, 202], [123, 203], [124, 204], [125, 205], [126, 206], [127, 207], [128, 208], [129, 209], [130, 210], [131, 211], [132, 212], [133, 213], [134, 214], [135, 215], [136, 216], [137, 217], [138, 218], [139, 219], [140, 220], [141, 221], [142, 222], [143, 223], [144, 224], [145, 225], [146, 226], [147, 227], [148, 228], [149, 229], [150, 230], [151, 231], [152, 232], [153, 233], [154, 234], [155, 235], [156, 236], [157, 237], [158, 238], [159, 239], [160, 240], [161, 241], [162, 242], [163, 243], [164, 244], [165, 245], [166, 246], [167, 247], [168, 248], [169, 249], [170, 250], [171, 251], [172, 252], [173, 253], [174, 254], [null, 255], [null, 256], [null, 257], [null, 258], [null, 259], [null, 260], [null, 261], [null, 262], [null, 263], [175, 264], [176, 265], [177, 266], [178, 267], [179, 268], [180, 269], [181, 270], [182, 271], [183, 272], [184, 273], [185, 274], [186, 275], [187, 276], [188, 277], [189, 278], [190, 279], [191, 280], [192, 281], [193, 282], [194, 283], [195, 284], [196, 285], [197, 286], [198, 287], [199, 288], [200, 289], [201, 290], [202, 291], [203, 292], [204, 293], [205, 294], [206, 295], [207, null], [null, 296], [null, 297], [208, 298], [209, 299], [210, 300], [211, 301], [212, 302], [213, 303], [214, 304], [215, 305], [216, 306], [217, 307], [218, 308], [219, 309], [220, 310], [221, 311], [222, 312], [223, 313], [224, 314], [225, 315], [226, 316], [227, 317], [228, 318], [229, 319], [230, 320], [231, 321], [232, 322], [233, 323], [234, 324], [235, 325], [236, 326], [237, 327], [238, 328], [239, null], [240, null], [null, 329], [null, 330], [null, 331], [241, 332], [242, 333], [243, 334], [244, 335], [245, 336], [246, 337], [247, 338], [248, 339], [249, 340], [250, 341], [251, 342], [252, 343], [253, 344], [254, 345], [255, 346], [256, 347], [257, 348], [258, 349], [259, 350], [260, 351], [261, 352], [262, 353], [263, 354], [264, 355], [265, 356], [266, 357], [267, 358], [268, 359], [269, 360], [270, 361], [271, 362], [272, 363], [273, 364], [274, 365], [275, 366], [276, 367], [277, 368], [278, 369], [279, 370], [280, 371], [281, 372], [282, 373], [283, 374], [284, null], [null, 375], [null, 376], [285, 377], [286, 378], [287, 379], [288, 380], [289, 381], [290, 382], [291, 383], [292, 384], [293, 385], [294, 386], [295, 387], [296, 388], [297, 389], [298, 390], [299, 391], [300, 392], [301, 393], [302, 394], [303, 395], [304, 396], [305, 397], [306, 398], [307, 399], [308, 400], [309, 401], [310, 402], [311, 403], [312, 404], [313, 405], [314, 406], [315, 407], [316, 408], [317, 409], [318, 410], [319, null], [320, null], [321, null], [null, 411], [null, 412], [null, 413], [322, 414], [null, 415], [323, 416], [324, 417], [325, 418], [326, 419], [327, 420], [328, 421], [329, 422], [330, 423], [331, 424], [332, 425], [333, 426], [334, 427], [335, 428], [336, 429], [337, 430], [null, 431], [null, 432], [null, 433], [null, 434], [null, 435], [null, 436], [338, 437], [339, 438], [340, 439], [341, 440], [342, 441], [343, 442], [344, 443], [345, 444], [346, 445], [347, 446], [348, 447], [349, 448], [350, 449], [351, 450], [352, 451], [353, 452], [354, 453], [355, 454], [356, 455], [357, null], [null, 456], [358, 457], [359, null], [360, null], [null, 458], [null, 459], [361, 460], [362, null], [363, 461], [364, 462], [365, 463], [366, 464], [367, 465], [368, 466], [369, 467], [370, 468], [371, 469], [372, 470], [373, 471], [374, 472], [375, 473], [376, 474], [377, 475], [378, 476], [379, null], [null, 477], [380, 478], [381, null], [null, 479], [382, 480], [383, 481], [384, 482], [385, 483], [null, 484], [null, 485], [null, 486], [null, 487], [null, 488], [null, 489], [null, 490], [null, 491], [null, 492], [null, 493], [null, 494], [null, 495], [null, 496], [null, 497], [null, 498], [null, 499], [null, 500], [null, 501], [null, 502], [null, 503], [null, 504], [null, 505], [null, 506], [null, 507], [null, 508], [null, 509], [null, 510], [null, 511], [null, 512], [null, 513], [null, 514], [null, 515], [null, 516], [null, 517], [null, 518], [null, 519], [null, 520], [null, 521], [null, 522], [null, 523], [null, 524], [null, 525], [null, 526], [null, 527], [null, 528], [null, 529], [null, 530], [null, 531], [null, 532], [null, 533], [null, 534], [null, 535], [null, 536], [null, 537], [null, 538], [386, 539], [387, 540], [388, 541], [389, 542], [390, null], [null, 543], [391, 544], [392, 545], [393, 546], [394, 547], [395, 548], [396, 549], [397, 550], [398, 551], [null, 552], [399, 553], [400, 554], [401, 555], [402, 556], [403, 557], [404, 558], [405, 559], [406, 560], [407, 561], [408, 562], [409, 563], [410, 564], [411, 565], [412, 566], [413, 567], [414, 568], [415, 569], [416, 570], [417, 571], [418, null], [null, 572], [419, 573], [420, 574], [421, 575], [422, 576], [423, 577], [424, 578], [425, 579], [426, 580], [427, 581], [428, 582], [429, 583], [430, 584], [431, 585], [432, 586], [433, 587], [434, 588], [435, 589], [436, 590], [437, 591], [438, 592], [439, 593], [440, 594], [441, 595], [442, 596], [443, 597], [444, 598], [445, 599], [446, 600], [447, 601], [448, 602], [449, 603], [450, 604], [451, 605], [452, null], [null, 606], [453, 607], [454, null], [455, null], [456, null], [null, 608], [null, 609], [null, 610], [457, 611], [458, 612], [459, 613], [460, null], [null, 614], [null, 615], [null, 616], [null, 617], [461, 618], [462, 619], [463, 620], [464, 621], [465, 622]]\u000A\u000A\u000A\u003C\u000A\u000Anull\u000A\u000A\u000A'